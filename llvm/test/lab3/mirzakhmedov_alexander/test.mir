#RUN: llc -march=x86-64 --load=%llvmshlibdir/X86MirzakhmedovCountPassIns%shlibext -run-pass=x86-mirzakhmedov-cnt-pass %s -o - | FileCheck %s

# source.cpp
#
# unsigned long ic;
#
# double calculate(double x, double y, double z) {
#     ic = 0;
#     return (x + y) / z;
# }
#
# int sumOfNaturalNumbers(int n) {
#     int sum = 0;
#     for (int i = 1; i <= n; ++i) {
#         sum += i;
#     }
#     return sum;
# }
#
# int performArithmetic(int a, int b, int c) {
#     return a * b + c;
#
# }
#
# void based() {}
#
# void checkEvenOdd(int num) {
#     ic = 0;
#     int res;
#     if (num % 2 == 0) {
#         res = 0;
#     } else {
#         res = 1;
#     }
# }
#
# int main(){
#     return 0;
# }
#
# clang++ -S -emit-llvm -g0 -o source.ll source.cpp
# llc -march=x86-64 source.ll -stop-after=x86-isel -o source.mir

--- |
  ; ModuleID = '../../source.ll'
  source_filename = "../../source.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef double @_Z9calculateddd(double noundef %0, double noundef %1, double noundef %2) #0 {
    %4 = alloca double, align 8
    %5 = alloca double, align 8
    %6 = alloca double, align 8
    store double %0, ptr %4, align 8
    store double %1, ptr %5, align 8
    store double %2, ptr %6, align 8
    store i64 0, ptr @ic, align 8
    %7 = load double, ptr %4, align 8
    %8 = load double, ptr %5, align 8
    %9 = fadd double %7, %8
    %10 = load double, ptr %6, align 8
    %11 = fdiv double %9, %10
    ret double %11
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z19sumOfNaturalNumbersi(i32 noundef %0) #0 {
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    store i32 0, ptr %3, align 4
    store i32 1, ptr %4, align 4
    br label %5
  
  5:                                                ; preds = %13, %1
    %6 = load i32, ptr %4, align 4
    %7 = load i32, ptr %2, align 4
    %8 = icmp sle i32 %6, %7
    br i1 %8, label %9, label %16
  
  9:                                                ; preds = %5
    %10 = load i32, ptr %4, align 4
    %11 = load i32, ptr %3, align 4
    %12 = add nsw i32 %11, %10
    store i32 %12, ptr %3, align 4
    br label %13
  
  13:                                               ; preds = %9
    %14 = load i32, ptr %4, align 4
    %15 = add nsw i32 %14, 1
    store i32 %15, ptr %4, align 4
    br label %5, !llvm.loop !6
  
  16:                                               ; preds = %5
    %17 = load i32, ptr %3, align 4
    ret i32 %17
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z17performArithmeticiii(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %6 = alloca i32, align 4
    store i32 %0, ptr %4, align 4
    store i32 %1, ptr %5, align 4
    store i32 %2, ptr %6, align 4
    %7 = load i32, ptr %4, align 4
    %8 = load i32, ptr %5, align 4
    %9 = mul nsw i32 %7, %8
    %10 = load i32, ptr %6, align 4
    %11 = add nsw i32 %9, %10
    ret i32 %11
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z5basedv() #0 {
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z12checkEvenOddi(i32 noundef %0) #0 {
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    store i64 0, ptr @ic, align 8
    %4 = load i32, ptr %2, align 4
    %5 = srem i32 %4, 2
    %6 = icmp eq i32 %5, 0
    br i1 %6, label %7, label %8
  
  7:                                                ; preds = %1
    store i32 0, ptr %3, align 4
    br label %9
  
  8:                                                ; preds = %1
    store i32 1, ptr %3, align 4
    br label %9
  
  9:                                                ; preds = %8, %7
    ret void
  }
  
  ; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
  define dso_local noundef i32 @main() #1 {
    %1 = alloca i32, align 4
    store i32 0, ptr %1, align 4
    ret i32 0
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Debian clang version 16.0.6 (27+b1)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z9calculateddd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: fr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: fr64, preferred-register: '' }
  - { id: 4, class: fr64, preferred-register: '' }
  - { id: 5, class: fr64, preferred-register: '' }
  - { id: 6, class: fr64, preferred-register: '' }
  - { id: 7, class: fr64, preferred-register: '' }
  - { id: 8, class: fr64, preferred-register: '' }
  - { id: 9, class: fr64, preferred-register: '' }
  - { id: 10, class: fr64, preferred-register: '' }
  - { id: 11, class: fr64, preferred-register: '' }
  - { id: 12, class: fr64, preferred-register: '' }
  - { id: 13, class: fr64, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%2' }
  - { reg: '$xmm2', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $xmm0, $xmm1, $xmm2
  
    %4:fr64 = COPY $xmm2
    %2:fr64 = COPY $xmm1
    %0:fr64 = COPY $xmm0
    %1:fr64 = COPY killed %0
    %3:fr64 = COPY killed %2
    %5:fr64 = COPY killed %4
    MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    %13:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %12:fr64 = ADDSDrm %13, %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    %9:fr64 = DIVSDrm %12, %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
    $xmm0 = COPY %9

    ; CHECK: %12:fr64 = ADDSDrm %13, %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    ; CHECK-NEXT: %9:fr64 = DIVSDrm %12, %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.6)
    ; CHECK-NEXT: $xmm0 = COPY %9
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 15, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $xmm0
    
    RET64 implicit $xmm0

...
---
name:            _Z19sumOfNaturalNumbersi
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

    ; CHECK: MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    ; CHECK-NEXT: MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3) 
    ; CHECK-NEXT: MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 5, implicit-def $eflags
  
  bb.1 (%ir-block.5):
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    
    ; CHECK: %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm %4, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    ; CHECK-NEXT: JCC_1 %bb.4, 15, implicit $eflags
    
    CMP32rm %4, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    JCC_1 %bb.4, 15, implicit $eflags
  
  bb.2 (%ir-block.9):
    successors: %bb.3(0x80000000)
  
    %11:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    %10:gr32 = ADD32rm %11, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s32) into %ir.3)

    ; CHECK: %11:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: %10:gr32 = ADD32rm %11, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    ; CHECK-NEXT: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
  
  bb.3 (%ir-block.13):
    successors: %bb.1(0x80000000)
  
    %15:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    %14:gr32 = ADD32ri %15, 1, implicit-def $eflags
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)

    ; CHECK: %15:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: %14:gr32 = ADD32ri %15, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.1
    
    JMP_1 %bb.1
  
  bb.4 (%ir-block.16):
    %6:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    $eax = COPY %6

    ; CHECK: %6:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    ; CHECK-NEXT: $eax = COPY %6
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
    
    RET64 implicit $eax


...
---
name:            _Z17performArithmeticiii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    liveins: $edi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.4)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.5)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.6)
    %13:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    %12:gr32 = IMUL32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
    %9:gr32 = ADD32rm %12, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
    $eax = COPY %9

    ; CHECK: %12:gr32 = IMUL32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
    ; CHECK-NEXT: %9:gr32 = ADD32rm %12, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
    ; CHECK-NEXT: $eax = COPY %9
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 14, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            _Z5basedv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: RET64
    RET64

...
---
name:            _Z12checkEvenOddi
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    %7:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %5:gr32 = MOV32ri 2
    $eax = COPY %7
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r %5, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
    %6:gr32 = COPY $edx

    ; CHECK: CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    ; CHECK-NEXT: IDIV32r %5, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx
    ; CHECK-NEXT: %6:gr32 = COPY $edx
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 12, implicit-def $eflags
    ; CHECK-NEXT: CMP32ri %6, 0, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.2, 5, implicit $eflags
    
    CMP32ri %6, 0, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1 (%ir-block.7):
    successors: %bb.3(0x80000000)
  
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
    
    ; CHECK: MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 2, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.3

    JMP_1 %bb.3
  
  bb.2 (%ir-block.8):
    successors: %bb.3(0x80000000)
  
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
    
    ; CHECK: MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
  
  bb.3 (%ir-block.9):
    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: RET64

    RET64

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0

    ; CHECK: MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
    ; CHECK-NEXT: %0:gr32 = MOV32r0 implicit-def $eflags
    ; CHECK-NEXT: $eax = COPY %0
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
