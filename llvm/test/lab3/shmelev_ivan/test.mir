#RUN: llc -march=x86-64 --load=%llvmshlibdir/X86ShmelevCountMInstruction%shlibext -run-pass=x86-shmelev-count-minstruction %s -o - | FileCheck %s

# source.cpp
#
# unsigned long ic;
#
# int factorial(int n) {
#
#     ic = 0;
#
#     int result = 1;
#
#     for (int i = 1; i <= n; ++i) {
#         result *= i;
#     }
#    
#     return result;
# }
#
# void cow() {
#
#     int a = 5;
#     int b = 10;
#     int c = 15;
#
#     int d = b*b - 4*a*c;
# }
#
# void simple() {}
#
# double goose(double a, double b) {
#
#     double current = a / b + 5.0;
#     current += 10.8;
#     current /= current * 3.0 + 12.0;
#
#     return current;
# }
#
# int hen(int w) {
#
#     int total = 0;
#     int a = 5;
#     int b = w + 10;
#
#     total = a / b * w + 1;
#
#     return total;
# }
#
# char symbol(char value) {
#
#     ic = 0;
#
#     char result;
#
#     if (value == 'X' || value == 'Y' || value == 'Z') {
#         result = 'Y';
#     } else {
#         result = 'N';
#     }
#
#     return result;
#
# }
#
# int main() {
#     return 0;
# }
#
# clang++ -S -emit-llvm -g0 -o source.ll source.cpp
# llc -march=x86-64 source.ll -stop-after=x86-isel -o source.mir

--- |
  ; ModuleID = '../../source.ll'
  source_filename = "../../source.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z9factoriali(i32 noundef %0) #0 {
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    store i64 0, ptr @ic, align 8
    store i32 1, ptr %3, align 4
    store i32 1, ptr %4, align 4
    br label %5
  
  5:                                                ; preds = %13, %1
    %6 = load i32, ptr %4, align 4
    %7 = load i32, ptr %2, align 4
    %8 = icmp sle i32 %6, %7
    br i1 %8, label %9, label %16
  
  9:                                                ; preds = %5
    %10 = load i32, ptr %4, align 4
    %11 = load i32, ptr %3, align 4
    %12 = mul nsw i32 %11, %10
    store i32 %12, ptr %3, align 4
    br label %13
  
  13:                                               ; preds = %9
    %14 = load i32, ptr %4, align 4
    %15 = add nsw i32 %14, 1
    store i32 %15, ptr %4, align 4
    br label %5, !llvm.loop !6
  
  16:                                               ; preds = %5
    %17 = load i32, ptr %3, align 4
    ret i32 %17
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z3cowv() #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    store i32 5, ptr %1, align 4
    store i32 10, ptr %2, align 4
    store i32 15, ptr %3, align 4
    %5 = load i32, ptr %2, align 4
    %6 = load i32, ptr %2, align 4
    %7 = mul nsw i32 %5, %6
    %8 = load i32, ptr %1, align 4
    %9 = mul nsw i32 4, %8
    %10 = load i32, ptr %3, align 4
    %11 = mul nsw i32 %9, %10
    %12 = sub nsw i32 %7, %11
    store i32 %12, ptr %4, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z6simplev() #0 {
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef double @_Z5goosedd(double noundef %0, double noundef %1) #0 {
    %3 = alloca double, align 8
    %4 = alloca double, align 8
    %5 = alloca double, align 8
    store double %0, ptr %3, align 8
    store double %1, ptr %4, align 8
    %6 = load double, ptr %3, align 8
    %7 = load double, ptr %4, align 8
    %8 = fdiv double %6, %7
    %9 = fadd double %8, 5.000000e+00
    store double %9, ptr %5, align 8
    %10 = load double, ptr %5, align 8
    %11 = fadd double %10, 1.080000e+01
    store double %11, ptr %5, align 8
    %12 = load double, ptr %5, align 8
    %13 = call double @llvm.fmuladd.f64(double %12, double 3.000000e+00, double 1.200000e+01)
    %14 = load double, ptr %5, align 8
    %15 = fdiv double %14, %13
    store double %15, ptr %5, align 8
    %16 = load double, ptr %5, align 8
    ret double %16
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare double @llvm.fmuladd.f64(double, double, double) #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z3heni(i32 noundef %0) #0 {
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    store i32 0, ptr %3, align 4
    store i32 5, ptr %4, align 4
    %6 = load i32, ptr %2, align 4
    %7 = add nsw i32 %6, 10
    store i32 %7, ptr %5, align 4
    %8 = load i32, ptr %4, align 4
    %9 = load i32, ptr %5, align 4
    %10 = sdiv i32 %8, %9
    %11 = load i32, ptr %2, align 4
    %12 = mul nsw i32 %10, %11
    %13 = add nsw i32 %12, 1
    store i32 %13, ptr %3, align 4
    %14 = load i32, ptr %3, align 4
    ret i32 %14
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef signext i8 @_Z6symbolc(i8 noundef signext %0) #0 {
    %2 = alloca i8, align 1
    %3 = alloca i8, align 1
    store i8 %0, ptr %2, align 1
    store i64 0, ptr @ic, align 8
    %4 = load i8, ptr %2, align 1
    %5 = sext i8 %4 to i32
    %6 = icmp eq i32 %5, 88
    br i1 %6, label %15, label %7
  
  7:                                                ; preds = %1
    %8 = load i8, ptr %2, align 1
    %9 = sext i8 %8 to i32
    %10 = icmp eq i32 %9, 89
    br i1 %10, label %15, label %11
  
  11:                                               ; preds = %7
    %12 = load i8, ptr %2, align 1
    %13 = sext i8 %12 to i32
    %14 = icmp eq i32 %13, 90
    br i1 %14, label %15, label %16
  
  15:                                               ; preds = %11, %7, %1
    store i8 89, ptr %3, align 1
    br label %17
  
  16:                                               ; preds = %11
    store i8 78, ptr %3, align 1
    br label %17
  
  17:                                               ; preds = %16, %15
    %18 = load i8, ptr %3, align 1
    ret i8 %18
  }
  
  ; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
  define dso_local noundef i32 @main() #2 {
    %1 = alloca i32, align 4
    store i32 0, ptr %1, align 4
    ret i32 0
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #2 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Debian clang version 16.0.6 (27+b1)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z9factoriali
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.1(0x80000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)

    ; CHECK: MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 6, implicit-def $eflags
  
  bb.1 (%ir-block.5):
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)

    ; CHECK: %4:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm %4, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    ; CHECK-NEXT: JCC_1 %bb.4, 15, implicit $eflags

    CMP32rm %4, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    JCC_1 %bb.4, 15, implicit $eflags
  
  bb.2 (%ir-block.9):
    successors: %bb.3(0x80000000)
  
    %11:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    %10:gr32 = IMUL32rm %11, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s32) into %ir.3)

    ; CHECK: %11:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: %10:gr32 = IMUL32rm %11, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    ; CHECK-NEXT: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
  
  bb.3 (%ir-block.13):
    successors: %bb.1(0x80000000)
  
    %15:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    %14:gr32 = ADD32ri %15, 1, implicit-def $eflags
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)

    ; CHECK: %15:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: %14:gr32 = ADD32ri %15, 1, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.2, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.1

    JMP_1 %bb.1
  
  bb.4 (%ir-block.16):
    %6:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    $eax = COPY %6

    ; CHECK: %6:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    ; CHECK-NEXT: $eax = COPY %6
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
    
    RET64 implicit $eax

...
---
name:            _Z3cowv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.1)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 10 :: (store (s32) into %ir.2)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 15 :: (store (s32) into %ir.3)
    %13:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %12:gr32 = IMUL32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    %9:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
    %8:gr32 = SHL32ri %9, 2, implicit-def $eflags
    %6:gr32 = IMUL32rm %8, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    %3:gr32 = SUB32rr %12, %6, implicit-def $eflags
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.4)
    
    ; CHECK: %3:gr32 = SUB32rr %12, %6, implicit-def $eflags
    ; CHECK-NEXT: MOV32mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 11, implicit-def $eflags
    ; CHECK-NEXT: RET64
    
    RET64

...
---
name:            _Z6simplev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: RET64

    RET64

...
---
name:            _Z5goosedd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: fr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: fr64, preferred-register: '' }
  - { id: 4, class: fr64, preferred-register: '' }
  - { id: 5, class: fr64, preferred-register: '' }
  - { id: 6, class: fr64, preferred-register: '' }
  - { id: 7, class: fr64, preferred-register: '' }
  - { id: 8, class: fr64, preferred-register: '' }
  - { id: 9, class: fr64, preferred-register: '' }
  - { id: 10, class: fr64, preferred-register: '' }
  - { id: 11, class: fr64, preferred-register: '' }
  - { id: 12, class: fr64, preferred-register: '' }
  - { id: 13, class: fr64, preferred-register: '' }
  - { id: 14, class: fr64, preferred-register: '' }
  - { id: 15, class: fr64, preferred-register: '' }
  - { id: 16, class: fr64, preferred-register: '' }
  - { id: 17, class: fr64, preferred-register: '' }
  - { id: 18, class: fr64, preferred-register: '' }
  - { id: 19, class: fr64, preferred-register: '' }
  - { id: 20, class: fr64, preferred-register: '' }
  - { id: 21, class: fr64, preferred-register: '' }
  - { id: 22, class: fr64, preferred-register: '' }
  - { id: 23, class: fr64, preferred-register: '' }
  - { id: 24, class: fr64, preferred-register: '' }
  - { id: 25, class: fr64, preferred-register: '' }
  - { id: 26, class: fr64, preferred-register: '' }
  - { id: 27, class: fr64, preferred-register: '' }
liveins:
  - { reg: '$xmm0', virtual-reg: '%0' }
  - { reg: '$xmm1', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'double 3.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              1
    value:           'double 1.200000e+01'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 1.080000e+01'
    alignment:       8
    isTargetSpecific: false
  - id:              3
    value:           'double 5.000000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    liveins: $xmm0, $xmm1
  
    %2:fr64 = COPY $xmm1
    %0:fr64 = COPY $xmm0
    %1:fr64 = COPY killed %0
    %3:fr64 = COPY killed %2
    MOVSDmr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOVSDmr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %27:fr64 = MOVSDrm_alt %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %26:fr64 = DIVSDrm %27, %stack.1, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.4)
    %22:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.3, $noreg
    %23:fr64 = ADDSDrr %26, %22, implicit $mxcsr
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.5)
    %18:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    %19:fr64 = ADDSDrm %18, %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.5)
    %15:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %12:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s64) from constant-pool)
    %13:fr64 = nofpexcept MULSDrr %15, killed %12, implicit $mxcsr
    %14:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg :: (load (s64) from constant-pool)
    %8:fr64 = nofpexcept ADDSDrr %13, killed %14, implicit $mxcsr
    %10:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %9:fr64 = DIVSDrr %10, %8, implicit $mxcsr
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.5)
    %5:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    $xmm0 = COPY %5

    ; CHECK: MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.5)
    ; CHECK-NEXT: %5:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ; CHECK-NEXT: $xmm0 = COPY %5
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 25, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $xmm0

    RET64 implicit $xmm0

...
---
name:            _Z3heni
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.3)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.4)
    %17:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %16:gr32 = ADD32ri %17, 10, implicit-def $eflags
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %16 :: (store (s32) into %ir.5)
    %13:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    $eax = COPY %13
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32m %stack.3, 1, $noreg, 0, $noreg, implicit-def $eax, implicit-def $edx, implicit-def $eflags, implicit $eax, implicit $edx :: (load (s32) from %ir.5)
    %12:gr32 = COPY $eax
    %9:gr32 = IMUL32rm %12, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.2)
    %6:gr32 = ADD32ri %9, 1, implicit-def $eflags
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %6 :: (store (s32) into %ir.3)
    %3:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    $eax = COPY %3

    ; CHECK: MOV32mr %stack.1, 1, $noreg, 0, $noreg, %6 :: (store (s32) into %ir.3)
    ; CHECK-NEXT: %3:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    ; CHECK-NEXT: $eax = COPY %3
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 19, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            _Z6symbolc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.1):
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr8 = COPY %0.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s8) into %ir.2)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    %4:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)

    ; CHECK: MOV8mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s8) into %ir.2)
    ; CHECK-NEXT: MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    ; CHECK-NEXT: %4:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 7, implicit-def $eflags
    ; CHECK-NEXT: CMP32ri %4, 88, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.3, 4, implicit $eflags

    CMP32ri %4, 88, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
  
  bb.1 (%ir-block.7):
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    %7:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)

    ; CHECK: %7:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32ri %7, 89, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.3, 4, implicit $eflags

    CMP32ri %7, 89, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
  
  bb.2 (%ir-block.11):
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    %10:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)

    ; CHECK: %10:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32ri %10, 90, implicit-def $eflags
    ; CHECK-NEXT: JCC_1 %bb.4, 5, implicit $eflags

    CMP32ri %10, 90, implicit-def $eflags
    JCC_1 %bb.4, 5, implicit $eflags
  
  bb.3 (%ir-block.15):
    successors: %bb.5(0x80000000)
  
    MOV8mi %stack.1, 1, $noreg, 0, $noreg, 89 :: (store (s8) into %ir.3)

    ; CHECK: MOV8mi %stack.1, 1, $noreg, 0, $noreg, 89 :: (store (s8) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 2, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.5

    JMP_1 %bb.5
  
  bb.4 (%ir-block.16):
    successors: %bb.5(0x80000000)
  
    MOV8mi %stack.1, 1, $noreg, 0, $noreg, 78 :: (store (s8) into %ir.3)

    ; CHECK: MOV8mi %stack.1, 1, $noreg, 0, $noreg, 78 :: (store (s8) into %ir.3)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
  
  bb.5 (%ir-block.17):
    %12:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    $eax = COPY %12

    ; CHECK: %12:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    ; CHECK-NEXT: $eax = COPY %12
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
    %0:gr32 = MOV32r0 implicit-def $eflags
    $eax = COPY %0

    ; CHECK: MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
    ; CHECK-NEXT: %0:gr32 = MOV32r0 implicit-def $eflags
    ; CHECK-NEXT: $eax = COPY %0
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax
    
    RET64 implicit $eax
...
