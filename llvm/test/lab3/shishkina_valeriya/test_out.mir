--- |
  ; ModuleID = 'testmir.mir'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local local_unnamed_addr global i64 0, align 8
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) local_unnamed_addr #0 {
  entry:
    store i64 0, ptr @ic, align 8, !tbaa !5
    %cmp5 = icmp sgt i32 %a, 0
    br i1 %cmp5, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %xtraiter = and i32 %a, 3
    %0 = icmp ult i32 %a, 4
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new
  
  for.body.preheader.new:                           ; preds = %for.body.preheader
    %unroll_iter = and i32 %a, -4
    br label %for.body
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
    %spec.select.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %d.06.unr = phi i32 [ 0, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    br label %for.body.epil
  
  for.body.epil:                                    ; preds = %for.body.epil, %for.body.epil.preheader
    %lsr.iv = phi i32 [ %xtraiter, %for.body.epil.preheader ], [ %lsr.iv.next, %for.body.epil ]
    %d.06.epil = phi i32 [ %spec.select.epil, %for.body.epil ], [ %d.06.unr, %for.body.epil.preheader ]
    %cmp1.epil = icmp slt i32 %d.06.epil, %b
    %add.epil = select i1 %cmp1.epil, i32 %c, i32 0
    %spec.select.epil = add nsw i32 %add.epil, %d.06.epil
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %epil.iter.cmp.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !9
  
  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    %d.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %for.body.epil ]
    ret i32 %d.0.lcssa
  
  for.body:                                         ; preds = %for.body, %for.body.preheader.new
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %for.body ], [ %unroll_iter, %for.body.preheader.new ]
    %d.06 = phi i32 [ 0, %for.body.preheader.new ], [ %spec.select.3, %for.body ]
    %cmp1 = icmp slt i32 %d.06, %b
    %add = select i1 %cmp1, i32 %c, i32 0
    %spec.select = add nsw i32 %add, %d.06
    %cmp1.1 = icmp slt i32 %spec.select, %b
    %add.1 = select i1 %cmp1.1, i32 %c, i32 0
    %spec.select.1 = add nsw i32 %add.1, %spec.select
    %cmp1.2 = icmp slt i32 %spec.select.1, %b
    %add.2 = select i1 %cmp1.2, i32 %c, i32 0
    %spec.select.2 = add nsw i32 %add.2, %spec.select.1
    %cmp1.3 = icmp slt i32 %spec.select.2, %b
    %add.3 = select i1 %cmp1.3, i32 %c, i32 0
    %spec.select.3 = add nsw i32 %add.3, %spec.select.2
    %lsr.iv.next2 = add i32 %lsr.iv1, -4
    %niter.ncmp.3 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !11
  }
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{!"clang version 17.0.6 (https://github.com/ShLera04/llvm-nnsu-2024.git 450b2a40cb91b60eaf1307df0cc91943fb7c5d74)"}
  !5 = !{!6, !6, i64 0}
  !6 = !{!"long", !7, i64 0}
  !7 = !{!"omnipotent char", !8, i64 0}
  !8 = !{!"Simple C++ TBAA"}
  !9 = distinct !{!9, !10}
  !10 = !{!"llvm.loop.unroll.disable"}
  !11 = distinct !{!11, !12}
  !12 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%13' }
  - { reg: '$esi', virtual-reg: '%14' }
  - { reg: '$edx', virtual-reg: '%15' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.6(0x30000000)
    liveins: $edi, $esi, $edx
  
    %15:gr32 = COPY $edx
    %14:gr32 = COPY $esi
    %13:gr32 = COPY $edi
    MOV64mi32 $rip, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic, !tbaa !5)
    %16:gr32 = MOV32r0 implicit-def dead $eflags
    TEST32rr %13, %13, implicit-def $eflags
    # ADD64ri32 @ic, 8, implicit-def $eflags
    JCC_1 %bb.6, 14, implicit $eflags
    JMP_1 %bb.1
  
  bb.1.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    %0:gr32 = AND32ri %13, 3, implicit-def dead $eflags
    %18:gr32 = MOV32r0 implicit-def dead $eflags
    %17:gr32 = IMPLICIT_DEF
    %19:gr32 = SUB32ri %13, 4, implicit-def $eflags
    # ADD64ri32 @ic, 6, implicit-def $eflags
    JCC_1 %bb.3, 2, implicit $eflags
    JMP_1 %bb.2
  
  bb.2.for.body.preheader.new:
    successors: %bb.7(0x80000000)
  
    %1:gr32 = AND32ri %13, -4, implicit-def dead $eflags
    %20:gr32 = MOV32r0 implicit-def dead $eflags
    # ADD64ri32 @ic, 3, implicit-def $eflags
    JMP_1 %bb.7
  
  bb.3.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.6(0x30000000), %bb.4(0x50000000)
  
    %2:gr32 = PHI %17, %bb.1, %11, %bb.7
    %3:gr32 = PHI %18, %bb.1, %11, %bb.7
    TEST32rr %0, %0, implicit-def $eflags
    # ADD64ri32 @ic, 5, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
    JMP_1 %bb.4
  
  bb.4.for.body.epil.preheader:
    successors: %bb.5(0x80000000)
  
    # ADD64ri32 @ic, 0, implicit-def $eflags
  
  bb.5.for.body.epil:
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
  
    %4:gr32 = PHI %0, %bb.4, %7, %bb.5
    %5:gr32 = PHI %3, %bb.4, %6, %bb.5
    %33:gr32 = MOV32r0 implicit-def dead $eflags
    %34:gr32 = SUB32rr %5, %14, implicit-def $eflags
    %35:gr32 = CMOV32rr %33, %15, 12, implicit $eflags
    %6:gr32 = nsw ADD32rr %35, %5, implicit-def dead $eflags
    %7:gr32 = DEC32r %4, implicit-def $eflags
    # ADD64ri32 @ic, 9, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.6.for.cond.cleanup:
    %8:gr32 = PHI %16, %bb.0, %2, %bb.3, %6, %bb.5
    $eax = COPY %8
    # ADD64ri32 @ic, 3, implicit-def $eflags
    RET 0, $eax
  
  bb.7.for.body:
    successors: %bb.3(0x04000000), %bb.7(0x7c000000)
  
    %9:gr32 = PHI %1, %bb.2, %12, %bb.7
    %10:gr32 = PHI %20, %bb.2, %11, %bb.7
    %21:gr32 = MOV32r0 implicit-def dead $eflags
    %22:gr32 = SUB32rr %10, %14, implicit-def $eflags
    %23:gr32 = CMOV32rr %21, %15, 12, implicit $eflags
    %24:gr32 = nsw ADD32rr %23, %10, implicit-def dead $eflags
    %25:gr32 = SUB32rr %24, %14, implicit-def $eflags
    %26:gr32 = CMOV32rr %21, %15, 12, implicit $eflags
    %27:gr32 = nsw ADD32rr %26, %24, implicit-def dead $eflags
    %28:gr32 = SUB32rr %27, %14, implicit-def $eflags
    %29:gr32 = CMOV32rr %21, %15, 12, implicit $eflags
    %30:gr32 = nsw ADD32rr %29, %27, implicit-def dead $eflags
    %31:gr32 = SUB32rr %30, %14, implicit-def $eflags
    %32:gr32 = CMOV32rr %21, %15, 12, implicit $eflags
    %11:gr32 = nsw ADD32rr %32, %30, implicit-def dead $eflags
    %12:gr32 = ADD32ri %9, -4, implicit-def $eflags
    # ADD64ri32 @ic, 18, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
    JMP_1 %bb.7

...
