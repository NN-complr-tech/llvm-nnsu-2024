# RUN: llc -march=x86-64 -simplify-mir -run-pass=x86-shishkina-mi-counter %s -o - | FileCheck %s
--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local local_unnamed_addr global i64 0, align 8
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) local_unnamed_addr #0 {
  entry:
    store i64 0, ptr @ic, align 8, !tbaa !5
    %cmp5 = icmp sgt i32 %a, 0
    br i1 %cmp5, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %xtraiter = and i32 %a, 3
    %0 = icmp ult i32 %a, 4
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new
  
  for.body.preheader.new:                           ; preds = %for.body.preheader
    %unroll_iter = and i32 %a, -4
    br label %for.body
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
    %spec.select.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %d.06.unr = phi i32 [ 0, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    br label %for.body.epil
  
  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %lsr.iv = phi i32 [ %xtraiter, %for.body.epil.preheader ], [ %lsr.iv.next, %for.body.epil ]
    %d.06.epil = phi i32 [ %spec.select.epil, %for.body.epil ], [ %d.06.unr, %for.body.epil.preheader ]
    %cmp1.epil = icmp slt i32 %d.06.epil, %b
    %add.epil = select i1 %cmp1.epil, i32 %c, i32 0
    %spec.select.epil = add nsw i32 %add.epil, %d.06.epil
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %epil.iter.cmp.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !9
  
  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    %d.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %for.body.epil ]
    ret i32 %d.0.lcssa
  
  for.body:                                         ; preds = %for.body, %for.body.preheader.new
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %for.body ], [ %unroll_iter, %for.body.preheader.new ]
    %d.06 = phi i32 [ 0, %for.body.preheader.new ], [ %spec.select.3, %for.body ]
    %cmp1 = icmp slt i32 %d.06, %b
    %add = select i1 %cmp1, i32 %c, i32 0
    %spec.select = add nsw i32 %add, %d.06
    %cmp1.1 = icmp slt i32 %spec.select, %b
    %add.1 = select i1 %cmp1.1, i32 %c, i32 0
    %spec.select.1 = add nsw i32 %add.1, %spec.select
    %cmp1.2 = icmp slt i32 %spec.select.1, %b
    %add.2 = select i1 %cmp1.2, i32 %c, i32 0
    %spec.select.2 = add nsw i32 %add.2, %spec.select.1
    %cmp1.3 = icmp slt i32 %spec.select.2, %b
    %add.3 = select i1 %cmp1.3, i32 %c, i32 0
    %spec.select.3 = add nsw i32 %add.3, %spec.select.2
    %lsr.iv.next2 = add i32 %lsr.iv1, -4
    %niter.ncmp.3 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !11
  }
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{!"clang version 17.0.6 (https://github.com/ShLera04/llvm-nnsu-2024.git 450b2a40cb91b60eaf1307df0cc91943fb7c5d74)"}
  !5 = !{!6, !6, i64 0}
  !6 = !{!"long", !7, i64 0}
  !7 = !{!"omnipotent char", !8, i64 0}
  !8 = !{!"Simple C++ TBAA"}
  !9 = distinct !{!9, !10}
  !10 = !{!"llvm.loop.unroll.disable"}
  !11 = distinct !{!11, !12}
  !12 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x50000000), %bb.1(0x30000000)
    liveins: $edi, $edx, $esi
  
    MOV64mi32 $rip, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic, !tbaa !5)
    TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 3, implicit-def $eflags
    JCC_1 %bb.1, 14, implicit $eflags
  
  bb.2.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.7(0x40000000)
    liveins: $edi, $edx, $esi
  
    $ecx = MOV32rr $edi
    renamable $ecx = AND32ri killed renamable $ecx, 3, implicit-def dead $eflags
    CMP32ri renamable $edi, 4, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 4, implicit-def $eflags
    JCC_1 %bb.7, 3, implicit $eflags
  
  bb.3:
    successors: %bb.4(0x80000000)
    liveins: $ecx, $edx, $esi
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 1, implicit-def $eflags
  
  bb.4.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.6(0x30000000), %bb.5(0x50000000)
    liveins: $eax, $ecx, $edx, $esi
  
    TEST32rr renamable $ecx, renamable $ecx, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 2, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.for.body.epil (align 16):
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    liveins: $eax, $ecx, $edx, $esi
  
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    renamable $edi = MOV32ri 0
    renamable $edi = CMOV32rr killed renamable $edi, renamable $edx, 12, implicit $eflags
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $edi, implicit-def dead $eflags
    renamable $ecx = DEC32r killed renamable $ecx, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 6, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
  
  bb.6.for.cond.cleanup:
    liveins: $eax
    ; CHECK: ADD64ri32 @ic, 1, implicit-def $eflags
    RET64 $eax
  
  bb.1:
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 2, implicit-def $eflags
    RET64 $eax
  
  bb.7.for.body.preheader.new:
    successors: %bb.8(0x80000000)
    liveins: $ecx, $edi, $edx, $esi
  
    renamable $edi = AND32ri killed renamable $edi, -4, implicit-def dead $eflags
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 3, implicit-def $eflags
    JMP_1 %bb.8
  
  bb.16.for.body (align 16):
    successors: %bb.4(0x04000000), %bb.8(0x7c000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    renamable $edi = ADD32ri killed renamable $edi, -4, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 3, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.8.for.body:
    successors: %bb.9(0x40000000), %bb.10(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 3, implicit-def $eflags
    JCC_1 %bb.10, 12, implicit $eflags
  
  bb.9.for.body:
    successors: %bb.10(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 1, implicit-def $eflags

  bb.10.for.body:
    successors: %bb.11(0x40000000), %bb.12(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 4, implicit-def $eflags
    JCC_1 %bb.12, 12, implicit $eflags
  
  bb.11.for.body:
    successors: %bb.12(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 1, implicit-def $eflags

  bb.12.for.body:
    successors: %bb.13(0x40000000), %bb.14(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 4, implicit-def $eflags
    JCC_1 %bb.14, 12, implicit $eflags
  
  bb.13.for.body:
    successors: %bb.14(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 1, implicit-def $eflags  

  bb.14.for.body:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    ; CHECK: ADD64ri32 @ic, 4, implicit-def $eflags
    JCC_1 %bb.16, 12, implicit $eflags
  
  bb.15.for.body:
    successors: %bb.16(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: ADD64ri32 @ic, 2, implicit-def $eflags
    JMP_1 %bb.16

...
