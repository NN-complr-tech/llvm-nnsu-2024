# RUN: llc -mtriple x86_64-unknown-linux-gnu --load=%llvmshlibdir/X86RKanakovMICounter%shlibext -run-pass=kanakov_mi_counter  %s -o - | FileCheck %s
--- |
  ; ModuleID = 'source.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %0, i32 noundef %1, i32 noundef %2) #0 {
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %6 = alloca i32, align 4
    %7 = alloca i32, align 4
    %8 = alloca i32, align 4
    store i32 %0, ptr %4, align 4
    store i32 %1, ptr %5, align 4
    store i32 %2, ptr %6, align 4
    store i32 0, ptr %7, align 4
    store i32 0, ptr %8, align 4
    br label %9
  
  9:                                                ; preds = %22, %3
    %10 = load i32, ptr %8, align 4
    %11 = load i32, ptr %4, align 4
    %12 = icmp slt i32 %10, %11
    br i1 %12, label %13, label %25
  
  13:                                               ; preds = %9
    %14 = load i32, ptr %7, align 4
    %15 = load i32, ptr %5, align 4
    %16 = icmp slt i32 %14, %15
    br i1 %16, label %17, label %21
  
  17:                                               ; preds = %13
    %18 = load i32, ptr %6, align 4
    %19 = load i32, ptr %7, align 4
    %20 = add nsw i32 %19, %18
    store i32 %20, ptr %7, align 4
    br label %21
  
  21:                                               ; preds = %17, %13
    br label %22
  
  22:                                               ; preds = %21
    %23 = load i32, ptr %8, align 4
    %24 = add nsw i32 %23, 1
    store i32 %24, ptr %8, align 4
    br label %9, !llvm.loop !6
  
  25:                                               ; preds = %9
    %26 = load i32, ptr %7, align 4
    ret i32 %26
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (https://github.com/Ach1L/llvm-nnsu-2024.git 4b59e6c09e3fdd446f0c992dd37e478c4f9104c6)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.3):
    successors: %bb.1(0x80000000)
    liveins: $edi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.4)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.5)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.6)
    MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.7)
    MOV32mi %stack.4, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.8)
    ; CHECK: ADD64mi32 @ic, 11, implicit-def $eflags
  
  bb.1 (%ir-block.9):
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
  
    %8:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    CMP32rm %8, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
    JCC_1 %bb.6, 13, implicit $eflags
  
  bb.2 (%ir-block.13):
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    CMP32rm %13, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.5)
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
    JCC_1 %bb.4, 13, implicit $eflags
  
  bb.3 (%ir-block.17):
    successors: %bb.4(0x80000000)
  
    %18:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.6)
    %17:gr32 = ADD32rm %18, %stack.3, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.7)
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.7)
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
  
  bb.4 (%ir-block.21):
    successors: %bb.5(0x80000000)
  
    ; CHECK: ADD64mi32 @ic, 1, implicit-def $eflags
    JMP_1 %bb.5
  
  bb.5 (%ir-block.22):
    successors: %bb.1(0x80000000)
  
    %22:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %21:gr32 = ADD32ri %22, 1, implicit-def $eflags
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %21 :: (store (s32) into %ir.8)
    ; CHECK: ADD64mi32 @ic, 4, implicit-def $eflags
    JMP_1 %bb.1
  
  bb.6 (%ir-block.25):
    %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    $eax = COPY %10
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
    RET64 implicit $eax

...
