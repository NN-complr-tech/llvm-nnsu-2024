#RUN: llc -march=x86-64 --load=%llvmshlibdir/X86SafarovMICounter%shlibext -run-pass=x86-safarov-mi-counter %s -o - | FileCheck %s

# source.cpp
#
# unsigned long ic;
#
# int functionOne(int x, int y) {
#    ic = 0;
#    int q = 3;
#    int sum = 0;
#    for (int i = 0; i < y; i++) {
#        if (sum < x) {
#            sum += q;
#        }
#    }
#    return sum;
# }
#
# int functionTwo() {
#    int p = 10;
#    int a = p + 5;
#    return a * 2 + p / 2;
# }
#
# void functionThree() {
#    int q = 3;
#    int p = 6;
#    int s = q + p + 1;
#    int result = s * 10;
# }
#
# double functionFour(double p, double q) {
#    double temp = q * 5.8;
#    temp /= temp * p / 1.5;
#    return temp + 3;
# }
#
# void functionFive() {}
#
# int functionSix(int a, int b) {
#    ic = 0;
#    int c;
#    if (b >= a) {
#        c = 100;
#    } else {
#        c = -100;
#    }
#    return c;
# }
#
# int main() {
#    return 0;
# }

# clang++ -S -emit-llvm -g0 -o source.ll source.cpp
# llc -march=x86-64 source.ll -stop-after=x86-isel -o source.mir

--- |
  ; ModuleID = '../../source.ll'
  source_filename = "../../source.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  @ic = dso_local global i64 0, align 8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z11functionOneii(i32 noundef %0, i32 noundef %1) #0 {
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %6 = alloca i32, align 4
    %7 = alloca i32, align 4
    store i32 %0, ptr %3, align 4
    store i32 %1, ptr %4, align 4
    store i64 0, ptr @ic, align 8
    store i32 3, ptr %5, align 4
    store i32 0, ptr %6, align 4
    store i32 0, ptr %7, align 4
    br label %8
  
  8:                                                ; preds = %21, %2
    %9 = load i32, ptr %7, align 4
    %10 = load i32, ptr %4, align 4
    %11 = icmp slt i32 %9, %10
    br i1 %11, label %12, label %24
  
  12:                                               ; preds = %8
    %13 = load i32, ptr %6, align 4
    %14 = load i32, ptr %3, align 4
    %15 = icmp slt i32 %13, %14
    br i1 %15, label %16, label %20
  
  16:                                               ; preds = %12
    %17 = load i32, ptr %5, align 4
    %18 = load i32, ptr %6, align 4
    %19 = add nsw i32 %18, %17
    store i32 %19, ptr %6, align 4
    br label %20
  
  20:                                               ; preds = %16, %12
    br label %21
  
  21:                                               ; preds = %20
    %22 = load i32, ptr %7, align 4
    %23 = add nsw i32 %22, 1
    store i32 %23, ptr %7, align 4
    br label %8, !llvm.loop !6
  
  24:                                               ; preds = %8
    %25 = load i32, ptr %6, align 4
    ret i32 %25
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z11functionTwov() #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    store i32 10, ptr %1, align 4
    %3 = load i32, ptr %1, align 4
    %4 = add nsw i32 %3, 5
    store i32 %4, ptr %2, align 4
    %5 = load i32, ptr %2, align 4
    %6 = mul nsw i32 %5, 2
    %7 = load i32, ptr %1, align 4
    %8 = sdiv i32 %7, 2
    %9 = add nsw i32 %6, %8
    ret i32 %9
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z13functionThreev() #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    store i32 3, ptr %1, align 4
    store i32 6, ptr %2, align 4
    %5 = load i32, ptr %1, align 4
    %6 = load i32, ptr %2, align 4
    %7 = add nsw i32 %5, %6
    %8 = add nsw i32 %7, 1
    store i32 %8, ptr %3, align 4
    %9 = load i32, ptr %3, align 4
    %10 = mul nsw i32 %9, 10
    store i32 %10, ptr %4, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef double @_Z12functionFourdd(double noundef %0, double noundef %1) #0 {
    %3 = alloca double, align 8
    %4 = alloca double, align 8
    %5 = alloca double, align 8
    store double %0, ptr %3, align 8
    store double %1, ptr %4, align 8
    %6 = load double, ptr %4, align 8
    %7 = fmul double %6, 5.800000e+00
    store double %7, ptr %5, align 8
    %8 = load double, ptr %5, align 8
    %9 = load double, ptr %3, align 8
    %10 = fmul double %8, %9
    %11 = fdiv double %10, 1.500000e+00
    %12 = load double, ptr %5, align 8
    %13 = fdiv double %12, %11
    store double %13, ptr %5, align 8
    %14 = load double, ptr %5, align 8
    %15 = fadd double %14, 3.000000e+00
    ret double %15
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z12functionFivev() #0 {
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z11functionSixii(i32 noundef %0, i32 noundef %1) #0 {
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    store i32 %0, ptr %3, align 4
    store i32 %1, ptr %4, align 4
    store i64 0, ptr @ic, align 8
    %6 = load i32, ptr %4, align 4
    %7 = load i32, ptr %3, align 4
    %8 = icmp sge i32 %6, %7
    br i1 %8, label %9, label %10
  
  9:                                                ; preds = %2
    store i32 100, ptr %5, align 4
    br label %11
  
  10:                                               ; preds = %2
    store i32 -100, ptr %5, align 4
    br label %11
  
  11:                                               ; preds = %10, %9
    %12 = load i32, ptr %5, align 4
    ret i32 %12
  }
  
  ; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
  define dso_local noundef i32 @main() #1 {
    %1 = alloca i32, align 4
    store i32 0, ptr %1, align 4
    ret i32 0
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Debian clang version 16.0.6 (19)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _Z11functionOneii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -36, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: -32, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    successors: %bb.1(0x80000000)
    liveins: $edi, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi $rbp, 1, $noreg, -12, $noreg, 3 :: (store (s32) into %ir.5)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.6)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.7)

    ; CHECK: MOV32mi $rbp, 1, $noreg, -12, $noreg, 3 :: (store (s32) into %ir.5)
    ; CHECK-NEXT: MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.6)
    ; CHECK-NEXT: MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.7)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 11, implicit-def $eflags
  
  bb.1 (%ir-block.8):
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.7)

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.7)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
    ; CHECK-NEXT: JCC_1 %bb.6, 13, implicit killed $eflags

    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.4)
    JCC_1 %bb.6, 13, implicit killed $eflags
  
  bb.2 (%ir-block.12):
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.6)

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.6)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    ; CHECK-NEXT: JCC_1 %bb.4, 13, implicit killed $eflags

    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    JCC_1 %bb.4, 13, implicit killed $eflags
  
  bb.3 (%ir-block.16):
    successors: %bb.4(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.5)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.6)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.6)
    
    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.5)
    ; CHECK-NEXT: renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.6)
    ; CHECK-NEXT: MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.6)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 3, implicit-def $eflags
  
  bb.4 (%ir-block.20):
    successors: %bb.5(0x80000000)
  
    JMP_1 %bb.5

    ; CHECK: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.5
  
  bb.5 (%ir-block.21):
    successors: %bb.1(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.7)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.7)

    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.7)
    ; CHECK-NEXT: renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    ; CHECK-NEXT: MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.7)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.1

    JMP_1 %bb.1
  
  bb.6 (%ir-block.24):
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.6)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.6)
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            _Z11functionTwov
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 10 :: (store (s32) into %ir.1)
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.1)
    renamable $eax = ADD32ri killed renamable $eax, 5, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
    renamable $ecx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.2)
    renamable $ecx = SHL32ri killed renamable $ecx, 1, implicit-def dead $eflags
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.1)
    renamable $esi = MOV32ri 2
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    renamable $ecx = ADD32rr killed renamable $ecx, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr killed $ecx
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: $eax = MOV32rr killed $ecx
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 20, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            _Z13functionThreev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: -32, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -12, $noreg, 3 :: (store (s32) into %ir.1)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 6 :: (store (s32) into %ir.2)
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.1)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.2)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
    renamable $eax = IMUL32rmi $rbp, 1, $noreg, -4, $noreg, 10, implicit-def dead $eflags :: (load (s32) from %ir.3)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 16, implicit-def $eflags
    ; CHECK-NEXT: RET64

    RET64

...
---
name:            _Z12functionFourdd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$xmm0', virtual-reg: '' }
  - { reg: '$xmm1', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -40, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: -24, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'double 3.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              1
    value:           'double 1.500000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 5.800000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    liveins: $xmm0, $xmm1
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOVSDmr $rbp, 1, $noreg, -24, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.3)
    MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm1 :: (store (s64) into %ir.4)
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    renamable $xmm0 = MULSDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.4)
    MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.5)
    renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.5)
    renamable $xmm0 = MULSDrm killed renamable $xmm0, $rbp, 1, $noreg, -24, $noreg, implicit $mxcsr :: (load (s64) from %ir.3)
    renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
    renamable $xmm0 = DIVSDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.5)
    renamable $xmm1 = DIVSDrr killed renamable $xmm1, killed renamable $xmm0, implicit $mxcsr
    MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm1 :: (store (s64) into %ir.5)
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
    renamable $xmm0 = ADDSDrm killed renamable $xmm0, $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8

    ; CHECK: renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
    ; CHECK-NEXT: renamable $xmm0 = ADDSDrm killed renamable $xmm0, $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.5)
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 22, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $xmm0

    RET64 implicit $xmm0

...
---
name:            _Z12functionFivev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 8, implicit-def $eflags
    ; CHECK-NEXT: RET64

    RET64

...
---
name:            _Z11functionSixii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.2):
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)

    ; CHECK: MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store (s32) into %ir.3)
    ; CHECK-NEXT: MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $esi :: (store (s32) into %ir.4)
    ; CHECK-NEXT: MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    ; CHECK-NEXT: renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 11, implicit-def $eflags
    ; CHECK-NEXT: CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    ; CHECK-NEXT: JCC_1 %bb.2, 12, implicit killed $eflags

    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    JCC_1 %bb.2, 12, implicit killed $eflags
  
  bb.1 (%ir-block.9):
    successors: %bb.3(0x80000000)
  
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 100 :: (store (s32) into %ir.5)
    JMP_1 %bb.3
    
    ; CHECK: MOV32mi $rbp, 1, $noreg, -4, $noreg, 100 :: (store (s32) into %ir.5)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 2, implicit-def $eflags
    ; CHECK-NEXT: JMP_1 %bb.3
  
  bb.2 (%ir-block.10):
    successors: %bb.3(0x80000000)
  
    MOV32mi $rbp, 1, $noreg, -4, $noreg, -100 :: (store (s32) into %ir.5)

    ; CHECK: MOV32mi $rbp, 1, $noreg, -4, $noreg, -100 :: (store (s32) into %ir.5)
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 1, implicit-def $eflags
  
  bb.3 (%ir-block.11):
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.5)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.5)
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 4, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit $eax

    RET64 implicit $eax

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.1)
    $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    
    ; CHECK: $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK-NEXT: $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    ; CHECK-NEXT: frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    ; CHECK-NEXT: ADD64mi32 $noreg, 1, $noreg, @ic, $noreg, 10, implicit-def $eflags
    ; CHECK-NEXT: RET64 implicit killed $eax

    RET64 implicit killed $eax

...
