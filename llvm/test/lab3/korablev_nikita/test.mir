#RUN: llc -march=x86-64 --load=%llvmshlibdir/X86KorablevMICounterPass%shlibext -run-pass=korablev_mi_counter_pass %s -o - | FileCheck %s

# int func_1(int a, int b, int c) {
#     static long ic = 0;

#     // Function body
#     int d = 0;
#     for (int i = 0; i < a; i++) {
#         if (d < b)
#             d += c;
#     }
#     return d;
# }

# int func_2(int a, int b) {
#     static long ic = 0;

#     // Function body
#     int d = 0;
#     for (int i = 0; i < a; i++) {
#         d += func_1(i, a, b);
#     }
#     return d;
# }

--- |
  ; ModuleID = '/home/nikita/Repositories/UNN_labs/llvm-project/llvm/test/lab3/korablev_nikita/test.ll'
  source_filename = "/home/nikita/Repositories/UNN_labs/llvm-project/llvm/test/lab3/korablev_nikita/test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @_ZZ6func_1iiiE2ic = internal global i64 0, align 8
  @_ZZ6func_2iiE2ic = internal global i64 0, align 8
  ; CHECK: @ic = external global i64
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z6func_1iii(i32 noundef %a, i32 noundef %b, i32 noundef %c) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %c.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %c, ptr %c.addr, align 4
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %d, align 4
    %3 = load i32, ptr %b.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %if.then, label %if.end
  
  if.then:                                          ; preds = %for.body
    %4 = load i32, ptr %c.addr, align 4
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %d, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %for.body
    br label %for.inc
  
  for.inc:                                          ; preds = %if.end
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !6
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z6func_2ii(i32 noundef %a, i32 noundef %b) #0 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %i, align 4
    %3 = load i32, ptr %a.addr, align 4
    %4 = load i32, ptr %b.addr, align 4
    %call = call noundef i32 @_Z6func_1iii(i32 noundef %2, i32 noundef %3, i32 noundef %4)
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %call
    store i32 %add, ptr %d, align 4
    br label %for.inc
  
  for.inc:                                          ; preds = %for.body
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !8
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (git@github.com:NikitaKorablev/llvm-project.git 4adf52a56a8f22f6a36f80cd480c3d6bdd25a5b9)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}
  !8 = distinct !{!8, !7}

...
---
name:            _Z6func_1iii
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
  - { reg: '$esi' }
  - { reg: '$edx' }
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, name: a.addr, offset: -36, size: 4, alignment: 4 }
  - { id: 1, name: b.addr, offset: -32, size: 4, alignment: 4 }
  - { id: 2, name: c.addr, offset: -28, size: 4, alignment: 4 }
  - { id: 3, name: d, offset: -20, size: 4, alignment: 4 }
  - { id: 4, name: i, offset: -24, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi, $edx, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store (s32) into %ir.a.addr)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.b.addr)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edx :: (store (s32) into %ir.c.addr)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: ADD64mi32 @ic, 10, implicit-def $eflags
  
  bb.1.for.cond:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    JCC_1 %bb.6, 13, implicit killed $eflags
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
  
  bb.2.for.body:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.4, 13, implicit killed $eflags
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
  
  bb.3.if.then:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.c.addr)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.d)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.d)
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
  
  bb.4.if.end:
    JMP_1 %bb.5
    ; CHECK: ADD64mi32 @ic, 1, implicit-def $eflags
  
  bb.5.for.inc:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    JMP_1 %bb.1
    ; CHECK: ADD64mi32 @ic, 4, implicit-def $eflags
  
  bb.6.for.end:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax
    ; CHECK: ADD64mi32 @ic, 4, implicit-def $eflags

...
---
name:            _Z6func_2ii
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
liveins:
  - { reg: '$edi' }
  - { reg: '$esi' }
frameInfo:
  stackSize:       24
  offsetAdjustment: -24
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16 }
stack:
  - { id: 0, name: a.addr, offset: -28, size: 4, alignment: 4 }
  - { id: 1, name: b.addr, offset: -32, size: 4, alignment: 4 }
  - { id: 2, name: d, offset: -24, size: 4, alignment: 4 }
  - { id: 3, name: i, offset: -20, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $edi, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    $rsp = frame-setup SUB64ri32 $rsp, 16, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edi :: (store (s32) into %ir.a.addr)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.b.addr)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.i)
    ; CHECK: ADD64mi32 @ic, 10, implicit-def $eflags
  
  bb.1.for.cond:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.i)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -12, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    JCC_1 %bb.4, 13, implicit killed $eflags
    ; CHECK: ADD64mi32 @ic, 3, implicit-def $eflags
  
  bb.2.for.body:
    renamable $edi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.i)
    renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.a.addr)
    renamable $edx = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load (s32) from %ir.b.addr)
    CALL64pcrel32 @_Z6func_1iii, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit $edx, implicit-def $eax
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.d)
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.d)
    ; CHECK: ADD64mi32 @ic, 6, implicit-def $eflags
  
  bb.3.for.inc:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    JMP_1 %bb.1
    ; CHECK: ADD64mi32 @ic, 4, implicit-def $eflags
  
  bb.4.for.end:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.d)
    $rsp = frame-destroy ADD64ri32 $rsp, 16, implicit-def dead $eflags
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax
    ; CHECK: ADD64mi32 @ic, 5, implicit-def $eflags

...
