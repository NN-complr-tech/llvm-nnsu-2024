--- |
  ; ModuleID = 'tested.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  %"class.std::ios_base::Init" = type { i8 }
  %"class.std::basic_ostream" = type { ptr, %"class.std::basic_ios" }
  %"class.std::basic_ios" = type { %"class.std::ios_base", ptr, i8, i8, ptr, ptr, ptr, ptr }
  %"class.std::ios_base" = type { ptr, i64, i64, i32, i32, i32, ptr, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, ptr, %"class.std::locale" }
  %"struct.std::ios_base::_Words" = type { ptr, i64 }
  %"class.std::locale" = type { ptr }
  %"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], ptr, i8, [7 x i8], ptr, ptr, ptr, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
  %"class.std::locale::facet.base" = type <{ ptr, i32 }>
  
  @_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
  @__dso_handle = external hidden global i8
  @ic = dso_local local_unnamed_addr global i64 0, align 8
  @_ZSt4cout = external global %"class.std::basic_ostream", align 8
  @.str = private unnamed_addr constant [50 x i8] c"Number of machine instructions executed for func(\00", align 1
  @.str.1 = private unnamed_addr constant [3 x i8] c", \00", align 1
  @.str.2 = private unnamed_addr constant [5 x i8] c") - \00", align 1
  @llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @_GLOBAL__sub_I_test.cpp, ptr null }]
  
  declare void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #0
  
  ; Function Attrs: nounwind
  declare void @_ZNSt8ios_base4InitD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1
  
  ; Function Attrs: nofree nounwind
  declare i32 @__cxa_atexit(ptr, ptr, ptr) local_unnamed_addr #2
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) local_unnamed_addr #3 {
  entry:
    store i64 0, ptr @ic, align 8, !tbaa !5
    %cmp5 = icmp sgt i32 %a, 0
    br i1 %cmp5, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %xtraiter = and i32 %a, 3
    %0 = icmp ult i32 %a, 4
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new
  
  for.body.preheader.new:                           ; preds = %for.body.preheader
    %unroll_iter = and i32 %a, -4
    br label %for.body
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
    %spec.select.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %d.06.unr = phi i32 [ 0, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    br label %for.body.epil
  
  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %lsr.iv = phi i32 [ %xtraiter, %for.body.epil.preheader ], [ %lsr.iv.next, %for.body.epil ]
    %d.06.epil = phi i32 [ %spec.select.epil, %for.body.epil ], [ %d.06.unr, %for.body.epil.preheader ]
    %cmp1.epil = icmp slt i32 %d.06.epil, %b
    %add.epil = select i1 %cmp1.epil, i32 %c, i32 0
    %spec.select.epil = add nsw i32 %add.epil, %d.06.epil
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %epil.iter.cmp.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !9
  
  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    %d.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %for.body.epil ]
    ret i32 %d.0.lcssa
  
  for.body:                                         ; preds = %for.body, %for.body.preheader.new
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %for.body ], [ %unroll_iter, %for.body.preheader.new ]
    %d.06 = phi i32 [ 0, %for.body.preheader.new ], [ %spec.select.3, %for.body ]
    %cmp1 = icmp slt i32 %d.06, %b
    %add = select i1 %cmp1, i32 %c, i32 0
    %spec.select = add nsw i32 %add, %d.06
    %cmp1.1 = icmp slt i32 %spec.select, %b
    %add.1 = select i1 %cmp1.1, i32 %c, i32 0
    %spec.select.1 = add nsw i32 %add.1, %spec.select
    %cmp1.2 = icmp slt i32 %spec.select.1, %b
    %add.2 = select i1 %cmp1.2, i32 %c, i32 0
    %spec.select.2 = add nsw i32 %add.2, %spec.select.1
    %cmp1.3 = icmp slt i32 %spec.select.2, %b
    %add.3 = select i1 %cmp1.3, i32 %c, i32 0
    %spec.select.3 = add nsw i32 %add.3, %spec.select.2
    %lsr.iv.next2 = add i32 %lsr.iv1, -4
    %niter.ncmp.3 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !11
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local void @_Z10empty_funcv() local_unnamed_addr #4 {
  entry:
    ret void
  }
  
  ; Function Attrs: mustprogress norecurse uwtable
  define dso_local noundef i32 @main() local_unnamed_addr #5 {
  entry:
    store i64 0, ptr @ic, align 8, !tbaa !5
    %call1.i = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, ptr noundef nonnull @.str, i64 noundef 49)
    %call2 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) @_ZSt4cout, i32 noundef 10)
    %call1.i14 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8) %call2, ptr noundef nonnull @.str.1, i64 noundef 2)
    %call4 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) %call2, i32 noundef 100)
    %call1.i16 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8) %call4, ptr noundef nonnull @.str.1, i64 noundef 2)
    %call6 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) %call4, i32 noundef 5)
    %call1.i18 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8) %call6, ptr noundef nonnull @.str.2, i64 noundef 4)
    %0 = load i64, ptr @ic, align 8, !tbaa !5
    %call.i = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo9_M_insertImEERSoT_(ptr noundef nonnull align 8 dereferenceable(8) %call6, i64 noundef %0)
    %vtable.i = load ptr, ptr %call.i, align 8, !tbaa !13
    %vbase.offset.ptr.i = getelementptr i8, ptr %vtable.i, i64 -24
    %vbase.offset.i = load i64, ptr %vbase.offset.ptr.i, align 8
    %add.ptr.i = getelementptr inbounds i8, ptr %call.i, i64 %vbase.offset.i
    %_M_ctype.i.i = getelementptr inbounds %"class.std::basic_ios", ptr %add.ptr.i, i64 0, i32 5
    %1 = load ptr, ptr %_M_ctype.i.i, align 8, !tbaa !15
    %tobool.not.i.i.i = icmp eq ptr %1, null
    br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  
  if.then.i.i.i:                                    ; preds = %entry
    tail call void @_ZSt16__throw_bad_castv() #8
    unreachable
  
  _ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %entry
    %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", ptr %1, i64 0, i32 8
    %2 = load i8, ptr %_M_widen_ok.i.i.i, align 8, !tbaa !25
    %tobool.not.i3.i.i = icmp eq i8 %2, 0
    br i1 %tobool.not.i3.i.i, label %if.end.i.i.i, label %if.then.i4.i.i
  
  if.then.i4.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
    %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", ptr %1, i64 0, i32 9, i64 10
    %3 = load i8, ptr %arrayidx.i.i.i, align 1, !tbaa !28
    br label %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
  
  if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
    tail call void @_ZNKSt5ctypeIcE13_M_widen_initEv(ptr noundef nonnull align 8 dereferenceable(570) %1)
    %vtable.i.i.i = load ptr, ptr %1, align 8, !tbaa !13
    %vfn.i.i.i = getelementptr inbounds ptr, ptr %vtable.i.i.i, i64 6
    %4 = load ptr, ptr %vfn.i.i.i, align 8
    %call.i.i.i = tail call noundef signext i8 %4(ptr noundef nonnull align 8 dereferenceable(570) %1, i8 noundef signext 10)
    br label %_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit
  
  _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit: ; preds = %if.end.i.i.i, %if.then.i4.i.i
    %retval.0.i.i.i = phi i8 [ %3, %if.then.i4.i.i ], [ %call.i.i.i, %if.end.i.i.i ]
    %call1.i20 = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo3putEc(ptr noundef nonnull align 8 dereferenceable(8) %call.i, i8 noundef signext %retval.0.i.i.i)
    %call.i.i = tail call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo5flushEv(ptr noundef nonnull align 8 dereferenceable(8) %call1.i20)
    ret i32 0
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) local_unnamed_addr #0
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef, i64 noundef) local_unnamed_addr #0
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo9_M_insertImEERSoT_(ptr noundef nonnull align 8 dereferenceable(8), i64 noundef) local_unnamed_addr #0
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo3putEc(ptr noundef nonnull align 8 dereferenceable(8), i8 noundef signext) local_unnamed_addr #0
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSo5flushEv(ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #0
  
  ; Function Attrs: noreturn
  declare void @_ZSt16__throw_bad_castv() local_unnamed_addr #6
  
  declare void @_ZNKSt5ctypeIcE13_M_widen_initEv(ptr noundef nonnull align 8 dereferenceable(570)) local_unnamed_addr #0
  
  ; Function Attrs: uwtable
  define internal void @_GLOBAL__sub_I_test.cpp() #7 section ".text.startup" {
  entry:
    tail call void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
    %0 = tail call i32 @__cxa_atexit(ptr nonnull @_ZNSt8ios_base4InitD1Ev, ptr nonnull @_ZStL8__ioinit, ptr nonnull @__dso_handle) #9
    ret void
  }
  
  attributes #0 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nofree nounwind }
  attributes #3 = { mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #5 = { mustprogress norecurse uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #6 = { noreturn "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #7 = { uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #8 = { noreturn }
  attributes #9 = { nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{!"clang version 17.0.6 (https://github.com/overinvest/llvm-nnsu-2024.git b3bf01225c3779b871b46c5daa5802944b825221)"}
  !5 = !{!6, !6, i64 0}
  !6 = !{!"long", !7, i64 0}
  !7 = !{!"omnipotent char", !8, i64 0}
  !8 = !{!"Simple C++ TBAA"}
  !9 = distinct !{!9, !10}
  !10 = !{!"llvm.loop.unroll.disable"}
  !11 = distinct !{!11, !12}
  !12 = !{!"llvm.loop.mustprogress"}
  !13 = !{!14, !14, i64 0}
  !14 = !{!"vtable pointer", !8, i64 0}
  !15 = !{!16, !20, i64 240}
  !16 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !17, i64 0, !20, i64 216, !7, i64 224, !24, i64 225, !20, i64 232, !20, i64 240, !20, i64 248, !20, i64 256}
  !17 = !{!"_ZTSSt8ios_base", !6, i64 8, !6, i64 16, !18, i64 24, !19, i64 28, !19, i64 32, !20, i64 40, !21, i64 48, !7, i64 64, !22, i64 192, !20, i64 200, !23, i64 208}
  !18 = !{!"_ZTSSt13_Ios_Fmtflags", !7, i64 0}
  !19 = !{!"_ZTSSt12_Ios_Iostate", !7, i64 0}
  !20 = !{!"any pointer", !7, i64 0}
  !21 = !{!"_ZTSNSt8ios_base6_WordsE", !20, i64 0, !6, i64 8}
  !22 = !{!"int", !7, i64 0}
  !23 = !{!"_ZTSSt6locale", !20, i64 0}
  !24 = !{!"bool", !7, i64 0}
  !25 = !{!26, !7, i64 56}
  !26 = !{!"_ZTSSt5ctypeIcE", !27, i64 0, !20, i64 16, !24, i64 24, !20, i64 32, !20, i64 40, !20, i64 48, !7, i64 56, !7, i64 57, !7, i64 313, !7, i64 569}
  !27 = !{!"_ZTSNSt6locale5facetE", !22, i64 8}
  !28 = !{!7, !7, i64 0}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x50000000), %bb.1(0x30000000)
    liveins: $edi, $edx, $esi
  
    MOV64mi32 $rip, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic, !tbaa !5)
    TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    JCC_1 %bb.1, 14, implicit $eflags
  
  bb.2.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.7(0x40000000)
    liveins: $edi, $edx, $esi
  
    $ecx = MOV32rr $edi
    renamable $ecx = AND32ri killed renamable $ecx, 3, implicit-def dead $eflags
    CMP32ri renamable $edi, 4, implicit-def $eflags
    JCC_1 %bb.7, 3, implicit $eflags
  
  bb.3:
    successors: %bb.4(0x80000000)
    liveins: $ecx, $edx, $esi
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
  
  bb.4.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.6(0x30000000), %bb.5(0x50000000)
    liveins: $eax, $ecx, $edx, $esi
  
    TEST32rr renamable $ecx, renamable $ecx, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.for.body.epil (align 16):
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    liveins: $eax, $ecx, $edx, $esi
  
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    renamable $edi = MOV32ri 0
    renamable $edi = CMOV32rr killed renamable $edi, renamable $edx, 12, implicit $eflags
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $edi, implicit-def dead $eflags
    renamable $ecx = DEC32r killed renamable $ecx, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
  
  bb.6.for.cond.cleanup:
    liveins: $eax
  
    RET64 $eax
  
  bb.1:
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    RET64 $eax
  
  bb.7.for.body.preheader.new:
    successors: %bb.8(0x80000000)
    liveins: $ecx, $edi, $edx, $esi
  
    renamable $edi = AND32ri killed renamable $edi, -4, implicit-def dead $eflags
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    JMP_1 %bb.8
  
  bb.16.for.body (align 16):
    successors: %bb.4(0x04000000), %bb.8(0x7c000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    renamable $edi = ADD32ri killed renamable $edi, -4, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.8.for.body:
    successors: %bb.9(0x40000000), %bb.10(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    JCC_1 %bb.10, 12, implicit $eflags
  
  bb.9.for.body:
    successors: %bb.10(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
  
  bb.10.for.body:
    successors: %bb.11(0x40000000), %bb.12(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    JCC_1 %bb.12, 12, implicit $eflags
  
  bb.11.for.body:
    successors: %bb.12(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
  
  bb.12.for.body:
    successors: %bb.13(0x40000000), %bb.14(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    JCC_1 %bb.14, 12, implicit $eflags
  
  bb.13.for.body:
    successors: %bb.14(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
  
  bb.14.for.body:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    JCC_1 %bb.16, 12, implicit $eflags
  
  bb.15.for.body:
    successors: %bb.16(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    JMP_1 %bb.16

...
---
name:            _Z10empty_funcv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    RET64

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       24
  offsetAdjustment: -24
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -24, size: 8, alignment: 8, stack-id: default, 
      callee-saved-register: '$rbx', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '$r14', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.5(0x00000800), %bb.1(0x7ffff800)
    liveins: $r14, $rbx
  
    frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 24
    frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 32
    CFI_INSTRUCTION offset $rbx, -24
    CFI_INSTRUCTION offset $r14, -16
    MOV64mi32 $rip, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic, !tbaa !5)
    renamable $rbx = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZSt4cout, $noreg :: (load (s64) from got)
    $esi = MOV32ri @.str, implicit-def $rsi
    $edx = MOV32ri 49, implicit-def $rdx
    $rdi = MOV64rr $rbx
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    $rdi = MOV64rr killed $rbx
    $esi = MOV32ri 10
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    $rbx = MOV64rr $rax
    $esi = MOV32ri @.str.1, implicit-def $rsi
    $edx = MOV32ri 2, implicit-def $rdx
    $rdi = MOV64rr $rax
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    $rdi = MOV64rr killed $rbx
    $esi = MOV32ri 100
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    $rbx = MOV64rr $rax
    $esi = MOV32ri @.str.1, implicit-def $rsi
    $edx = MOV32ri 2, implicit-def $rdx
    $rdi = MOV64rr $rax
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    $rdi = MOV64rr killed $rbx
    $esi = MOV32ri 5
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    $rbx = MOV64rr $rax
    $esi = MOV32ri @.str.2, implicit-def $rsi
    $edx = MOV32ri 4, implicit-def $rdx
    $rdi = MOV64rr $rax
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    renamable $rsi = MOV64rm $rip, 1, $noreg, @ic, $noreg :: (dereferenceable load (s64) from @ic, !tbaa !5)
    $rdi = MOV64rr killed $rbx
    CALL64pcrel32 target-flags(x86-plt) @_ZNSo9_M_insertImEERSoT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    $rbx = MOV64rr $rax
    renamable $rax = MOV64rm $rax, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.call.i, !tbaa !13)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, -24, $noreg :: (load (s64) from %ir.vbase.offset.ptr.i)
    renamable $r14 = MOV64rm renamable $rbx, 1, killed renamable $rax, 240, $noreg :: (load (s64) from %ir._M_ctype.i.i, !tbaa !15)
    TEST64rr renamable $r14, renamable $r14, implicit-def $eflags
    JCC_1 %bb.5, 4, implicit $eflags
  
  bb.1._ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i:
    successors: %bb.3(0x30000000), %bb.2(0x50000000)
    liveins: $rbx, $r14
  
    CMP8mi renamable $r14, 1, $noreg, 56, $noreg, 0, implicit-def $eflags :: (load (s8) from %ir._M_widen_ok.i.i.i, align 8, !tbaa !25)
    JCC_1 %bb.3, 4, implicit killed $eflags
  
  bb.2.if.then.i4.i.i:
    successors: %bb.4(0x80000000)
    liveins: $rbx, $r14
  
    $eax = MOVZX32rm8 killed renamable $r14, 1, $noreg, 67, $noreg :: (load (s8) from %ir.arrayidx.i.i.i, !tbaa !28)
    JMP_1 %bb.4
  
  bb.3.if.end.i.i.i:
    successors: %bb.4(0x80000000)
    liveins: $rbx, $r14
  
    $rdi = MOV64rr $r14
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt5ctypeIcE13_M_widen_initEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    renamable $rax = MOV64rm renamable $r14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1, !tbaa !13)
    $rdi = MOV64rr killed $r14
    $esi = MOV32ri 10
    CALL64m killed renamable $rax, 1, $noreg, 48, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $al :: (load (s64) from %ir.vfn.i.i.i)
  
  bb.4._ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.exit:
    liveins: $al, $rbx
  
    renamable $esi = MOVSX32rr8 killed renamable $al
    $rdi = MOV64rr killed $rbx
    CALL64pcrel32 target-flags(x86-plt) @_ZNSo3putEc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    $rdi = MOV64rr killed $rax
    CALL64pcrel32 target-flags(x86-plt) @_ZNSo5flushEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax
    $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    $rsp = frame-destroy ADD64ri32 $rsp, 8, implicit-def dead $eflags
    frame-destroy CFI_INSTRUCTION def_cfa_offset 24
    $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa_offset 16
    $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa_offset 8
    RET64 $eax
  
  bb.5.if.then.i.i.i:
    CFI_INSTRUCTION def_cfa_offset 32
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__throw_bad_castv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp

...
---
name:            _GLOBAL__sub_I_test.cpp
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     true
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    $edi = MOV32ri @_ZStL8__ioinit, implicit-def $rdi
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt8ios_base4InitC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZNSt8ios_base4InitD1Ev, $noreg :: (load (s64) from got)
    $esi = MOV32ri @_ZStL8__ioinit, implicit-def $rsi
    $edx = MOV32ri @__dso_handle, implicit-def $rdx
    $rax = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa_offset 8
    TAILJMPd64 target-flags(x86-plt) @__cxa_atexit, csr_64, implicit $rsp, implicit $ssp, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx

...
