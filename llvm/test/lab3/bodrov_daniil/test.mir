# RUN: llc -march=x86-64 --load=%llvmshlibdir/X86CountInstBD%shlibext -run-pass=x86-count-machine-instructions %s -o - | FileCheck %s

# unsigned long ic;
# 
# int func(int a, int b, int c) {
#     ic = 0;
# 
#     // Function body
#     int d = 0;
#     for (int i = 0; i < a; ++i) {
#         if (d < b)
#             d += c;
#     }
#     return d;
# }
# 
# void empty_func() {}
# 
# int myFunction(int x, int y, int z) {
#     // Function body
#     int total = 0;
#     for (int i = 0; i < x; ++i) {
#         if (i % 2 == 0) {
#             total += y;
#         } else {
#             total -= z;
#         }
#     }
#     return total;
# }
# 
# int myFunctionAnotherVar(int x, int y, int z) {
#     // Function body
#     int total = 0;
#     for (int i = 0; i < x; ++i) {
#         for (int j = 0; j < y; ++j) {
#             total += (x + y) - z;
#         }
#     }
#     return total;
# }

--- |
  ; ModuleID = 'tested.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  @ic = dso_local local_unnamed_addr global i64 0, align 8
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) local_unnamed_addr #0 {
  entry:
    store i64 0, ptr @ic, align 8, !tbaa !5
    %cmp5 = icmp sgt i32 %a, 0
    br i1 %cmp5, label %for.body.preheader, label %for.cond.cleanup
  
  for.body.preheader:                               ; preds = %entry
    %xtraiter = and i32 %a, 3
    %0 = icmp ult i32 %a, 4
    br i1 %0, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new
  
  for.body.preheader.new:                           ; preds = %for.body.preheader
    %unroll_iter = and i32 %a, -4
    br label %for.body
  
  for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
    %spec.select.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %d.06.unr = phi i32 [ 0, %for.body.preheader ], [ %spec.select.3, %for.body ]
    %lcmp.mod.not = icmp eq i32 %xtraiter, 0
    br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil.preheader
  
  for.body.epil.preheader:                          ; preds = %for.cond.cleanup.loopexit.unr-lcssa
    br label %for.body.epil
  
  for.body.epil:                                    ; preds = %for.body.epil.preheader, %for.body.epil
    %lsr.iv = phi i32 [ %xtraiter, %for.body.epil.preheader ], [ %lsr.iv.next, %for.body.epil ]
    %d.06.epil = phi i32 [ %spec.select.epil, %for.body.epil ], [ %d.06.unr, %for.body.epil.preheader ]
    %cmp1.epil = icmp slt i32 %d.06.epil, %b
    %add.epil = select i1 %cmp1.epil, i32 %c, i32 0
    %spec.select.epil = add nsw i32 %add.epil, %d.06.epil
    %lsr.iv.next = add nsw i32 %lsr.iv, -1
    %epil.iter.cmp.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !9
  
  for.cond.cleanup:                                 ; preds = %for.body.epil, %for.cond.cleanup.loopexit.unr-lcssa, %entry
    %d.0.lcssa = phi i32 [ 0, %entry ], [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %for.body.epil ]
    ret i32 %d.0.lcssa
  
  for.body:                                         ; preds = %for.body, %for.body.preheader.new
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %for.body ], [ %unroll_iter, %for.body.preheader.new ]
    %d.06 = phi i32 [ 0, %for.body.preheader.new ], [ %spec.select.3, %for.body ]
    %cmp1 = icmp slt i32 %d.06, %b
    %add = select i1 %cmp1, i32 %c, i32 0
    %spec.select = add nsw i32 %add, %d.06
    %cmp1.1 = icmp slt i32 %spec.select, %b
    %add.1 = select i1 %cmp1.1, i32 %c, i32 0
    %spec.select.1 = add nsw i32 %add.1, %spec.select
    %cmp1.2 = icmp slt i32 %spec.select.1, %b
    %add.2 = select i1 %cmp1.2, i32 %c, i32 0
    %spec.select.2 = add nsw i32 %add.2, %spec.select.1
    %cmp1.3 = icmp slt i32 %spec.select.2, %b
    %add.3 = select i1 %cmp1.3, i32 %c, i32 0
    %spec.select.3 = add nsw i32 %add.3, %spec.select.2
    %lsr.iv.next2 = add i32 %lsr.iv1, -4
    %niter.ncmp.3 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %niter.ncmp.3, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !11
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local void @_Z10empty_funcv() local_unnamed_addr #1 {
  entry:
    ret void
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef i32 @_Z10myFunctioniii(i32 noundef %x, i32 noundef %y, i32 noundef %z) local_unnamed_addr #1 {
  entry:
    %cmp6 = icmp sgt i32 %x, 0
    br i1 %cmp6, label %for.body.lr.ph, label %for.cond.cleanup
  
  for.body.lr.ph:                                   ; preds = %entry
    %0 = sub i32 0, %z
    %min.iters.check = icmp ult i32 %x, 8
    br i1 %min.iters.check, label %for.body.preheader, label %vector.ph
  
  vector.ph:                                        ; preds = %for.body.lr.ph
    %n.vec = and i32 %x, -8
    %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %y, i64 0
    %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
    %broadcast.splatinsert11 = insertelement <4 x i32> poison, i32 %0, i64 0
    %broadcast.splat12 = shufflevector <4 x i32> %broadcast.splatinsert11, <4 x i32> poison, <4 x i32> zeroinitializer
    %broadcast.splatinsert13 = insertelement <4 x i32> poison, i32 %y, i64 0
    %broadcast.splat14 = shufflevector <4 x i32> %broadcast.splatinsert13, <4 x i32> poison, <4 x i32> zeroinitializer
    %broadcast.splatinsert15 = insertelement <4 x i32> poison, i32 %0, i64 0
    %broadcast.splat16 = shufflevector <4 x i32> %broadcast.splatinsert15, <4 x i32> poison, <4 x i32> zeroinitializer
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv = phi i32 [ %lsr.iv.next, %vector.body ], [ %n.vec, %vector.ph ]
    %vec.ind = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
    %vec.phi = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %7, %vector.body ]
    %vec.phi10 = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %8, %vector.body ]
    %1 = and <4 x i32> %vec.ind, <i32 1, i32 1, i32 1, i32 1>
    %2 = and <4 x i32> %vec.ind, <i32 1, i32 1, i32 1, i32 1>
    %3 = icmp eq <4 x i32> %1, zeroinitializer
    %4 = icmp eq <4 x i32> %2, zeroinitializer
    %5 = select <4 x i1> %3, <4 x i32> %broadcast.splat, <4 x i32> %broadcast.splat12
    %6 = select <4 x i1> %4, <4 x i32> %broadcast.splat14, <4 x i32> %broadcast.splat16
    %7 = add <4 x i32> %5, %vec.phi
    %8 = add <4 x i32> %6, %vec.phi10
    %vec.ind.next = add <4 x i32> %vec.ind, <i32 8, i32 8, i32 8, i32 8>
    %lsr.iv.next = add i32 %lsr.iv, -8
    %9 = icmp eq i32 %lsr.iv.next, 0
    br i1 %9, label %middle.block, label %vector.body, !llvm.loop !13
  
  middle.block:                                     ; preds = %vector.body
    %bin.rdx = add <4 x i32> %8, %7
    %rdx.shuf = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 poison, i32 poison>
    %bin.rdx1 = add <4 x i32> %bin.rdx, %rdx.shuf
    %rdx.shuf2 = shufflevector <4 x i32> %bin.rdx1, <4 x i32> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
    %bin.rdx3 = add <4 x i32> %bin.rdx1, %rdx.shuf2
    %10 = extractelement <4 x i32> %bin.rdx3, i32 0
    %cmp.n = icmp eq i32 %n.vec, %x
    br i1 %cmp.n, label %for.cond.cleanup, label %for.body.preheader
  
  for.body.preheader:                               ; preds = %middle.block, %for.body.lr.ph
    %i.08.ph = phi i32 [ 0, %for.body.lr.ph ], [ %n.vec, %middle.block ]
    %total.07.ph = phi i32 [ 0, %for.body.lr.ph ], [ %10, %middle.block ]
    br label %for.body
  
  for.cond.cleanup:                                 ; preds = %for.body, %middle.block, %entry
    %total.0.lcssa = phi i32 [ 0, %entry ], [ %10, %middle.block ], [ %total.1, %for.body ]
    ret i32 %total.0.lcssa
  
  for.body:                                         ; preds = %for.body, %for.body.preheader
    %i.08 = phi i32 [ %inc, %for.body ], [ %i.08.ph, %for.body.preheader ]
    %total.07 = phi i32 [ %total.1, %for.body ], [ %total.07.ph, %for.body.preheader ]
    %rem = and i32 %i.08, 1
    %cmp1 = icmp eq i32 %rem, 0
    %total.1.p = select i1 %cmp1, i32 %y, i32 %0
    %total.1 = add i32 %total.1.p, %total.07
    %inc = add nuw nsw i32 %i.08, 1
    %exitcond.not = icmp eq i32 %x, %inc
    br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !16
  }
  
  ; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable
  define dso_local noundef i32 @_Z20myFunctionAnotherVariii(i32 noundef %x, i32 noundef %y, i32 noundef %z) local_unnamed_addr #1 {
  entry:
    %cmp17 = icmp sgt i32 %x, 0
    br i1 %cmp17, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup
  
  for.cond1.preheader.lr.ph:                        ; preds = %entry
    %add = add i32 %y, %x
    %sub = sub i32 %add, %z
    %0 = add i32 %y, -1
    %1 = mul i32 %sub, %0
    %2 = add i32 %add, %1
    %3 = sub i32 %2, %z
    %min.iters.check = icmp ult i32 %x, 8
    br i1 %min.iters.check, label %for.cond1.preheader.preheader, label %vector.ph
  
  vector.ph:                                        ; preds = %for.cond1.preheader.lr.ph
    %4 = icmp sgt i32 %y, 0
    %n.vec = and i32 %x, -8
    %broadcast.splatinsert = insertelement <4 x i32> poison, i32 %3, i64 0
    %broadcast.splat = shufflevector <4 x i32> %broadcast.splatinsert, <4 x i32> poison, <4 x i32> zeroinitializer
    %broadcast.splatinsert22 = insertelement <4 x i32> poison, i32 %3, i64 0
    %broadcast.splat23 = shufflevector <4 x i32> %broadcast.splatinsert22, <4 x i32> poison, <4 x i32> zeroinitializer
    %5 = select i1 %4, <4 x i32> %broadcast.splat, <4 x i32> zeroinitializer
    %6 = select i1 %4, <4 x i32> %broadcast.splat23, <4 x i32> zeroinitializer
    br label %vector.body
  
  vector.body:                                      ; preds = %vector.body, %vector.ph
    %lsr.iv1 = phi i32 [ %lsr.iv.next2, %vector.body ], [ %n.vec, %vector.ph ]
    %vec.phi = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %7, %vector.body ]
    %vec.phi21 = phi <4 x i32> [ zeroinitializer, %vector.ph ], [ %8, %vector.body ]
    %7 = add <4 x i32> %vec.phi, %5
    %8 = add <4 x i32> %vec.phi21, %6
    %lsr.iv.next2 = add i32 %lsr.iv1, -8
    %9 = icmp eq i32 %lsr.iv.next2, 0
    br i1 %9, label %middle.block, label %vector.body, !llvm.loop !17
  
  middle.block:                                     ; preds = %vector.body
    %bin.rdx = add <4 x i32> %8, %7
    %rdx.shuf = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 poison, i32 poison>
    %bin.rdx3 = add <4 x i32> %bin.rdx, %rdx.shuf
    %rdx.shuf4 = shufflevector <4 x i32> %bin.rdx3, <4 x i32> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>
    %bin.rdx5 = add <4 x i32> %bin.rdx3, %rdx.shuf4
    %10 = extractelement <4 x i32> %bin.rdx5, i32 0
    %cmp.n = icmp eq i32 %n.vec, %x
    br i1 %cmp.n, label %for.cond.cleanup, label %for.cond1.preheader.preheader
  
  for.cond1.preheader.preheader:                    ; preds = %middle.block, %for.cond1.preheader.lr.ph
    %i.019.ph = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %n.vec, %middle.block ]
    %total.018.ph = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %10, %middle.block ]
    %11 = icmp sgt i32 %y, 0
    %12 = select i1 %11, i32 %3, i32 0
    %13 = sub i32 %x, %i.019.ph
    %14 = mul i32 %12, %13
    %15 = add i32 %total.018.ph, %14
    br label %for.cond1.preheader
  
  for.cond1.preheader:                              ; preds = %for.cond1.preheader, %for.cond1.preheader.preheader
    %lsr.iv = phi i32 [ %lsr.iv.next, %for.cond1.preheader ], [ %13, %for.cond1.preheader.preheader ]
    %lsr.iv.next = add i32 %lsr.iv, -1
    %exitcond.not = icmp eq i32 %lsr.iv.next, 0
    br i1 %exitcond.not, label %for.cond.cleanup, label %for.cond1.preheader, !llvm.loop !18
  
  for.cond.cleanup:                                 ; preds = %for.cond1.preheader, %middle.block, %entry
    %total.0.lcssa = phi i32 [ 0, %entry ], [ %10, %middle.block ], [ %15, %for.cond1.preheader ]
    ret i32 %total.0.lcssa
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2
  
  attributes #0 = { mustprogress nofree norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{!"clang version 17.0.6 (https://github.com/overinvest/llvm-nnsu-2024.git b3bf01225c3779b871b46c5daa5802944b825221)"}
  !5 = !{!6, !6, i64 0}
  !6 = !{!"long", !7, i64 0}
  !7 = !{!"omnipotent char", !8, i64 0}
  !8 = !{!"Simple C++ TBAA"}
  !9 = distinct !{!9, !10}
  !10 = !{!"llvm.loop.unroll.disable"}
  !11 = distinct !{!11, !12}
  !12 = !{!"llvm.loop.mustprogress"}
  !13 = distinct !{!13, !12, !14, !15}
  !14 = !{!"llvm.loop.isvectorized", i32 1}
  !15 = !{!"llvm.loop.unroll.runtime.disable"}
  !16 = distinct !{!16, !12, !15, !14}
  !17 = distinct !{!17, !12, !14, !15}
  !18 = distinct !{!18, !12, !15, !14}

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x50000000), %bb.1(0x30000000)
    liveins: $edi, $edx, $esi
  
    MOV64mi32 $rip, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic, !tbaa !5)
    TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 3, implicit-def $eflags
    JCC_1 %bb.1, 14, implicit $eflags
  
  bb.2.for.body.preheader:
    successors: %bb.3(0x40000000), %bb.7(0x40000000)
    liveins: $edi, $edx, $esi
  
    $ecx = MOV32rr $edi
    renamable $ecx = AND32ri killed renamable $ecx, 3, implicit-def dead $eflags
    CMP32ri renamable $edi, 4, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
    JCC_1 %bb.7, 3, implicit $eflags
  
  bb.3:
    successors: %bb.4(0x80000000)
    liveins: $ecx, $edx, $esi
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
  
  bb.4.for.cond.cleanup.loopexit.unr-lcssa:
    successors: %bb.6(0x30000000), %bb.5(0x50000000)
    liveins: $eax, $ecx, $edx, $esi
  
    TEST32rr renamable $ecx, renamable $ecx, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.for.body.epil (align 16):
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    liveins: $eax, $ecx, $edx, $esi
  
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    renamable $edi = MOV32ri 0
    renamable $edi = CMOV32rr killed renamable $edi, renamable $edx, 12, implicit $eflags
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $edi, implicit-def dead $eflags
    renamable $ecx = DEC32r killed renamable $ecx, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 6, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
  
  bb.6.for.cond.cleanup:
    liveins: $eax
  
    ; CHECK: MOV64mr %0, &ic
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
    RET64 $eax
  
  bb.1:
    ; CHECK: MOV64mr %0, &ic
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    RET64 $eax
  
  bb.7.for.body.preheader.new:
    successors: %bb.8(0x80000000)
    liveins: $ecx, $edi, $edx, $esi
  
    renamable $edi = AND32ri killed renamable $edi, -4, implicit-def dead $eflags
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 3, implicit-def $eflags
    JMP_1 %bb.8
  
  bb.16.for.body (align 16):
    successors: %bb.4(0x04000000), %bb.8(0x7c000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    renamable $edi = ADD32ri killed renamable $edi, -4, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.8.for.body:
    successors: %bb.9(0x40000000), %bb.10(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 3, implicit-def $eflags
    JCC_1 %bb.10, 12, implicit $eflags
  
  bb.9.for.body:
    successors: %bb.10(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
  
  bb.10.for.body:
    successors: %bb.11(0x40000000), %bb.12(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
    JCC_1 %bb.12, 12, implicit $eflags
  
  bb.11.for.body:
    successors: %bb.12(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
  
  bb.12.for.body:
    successors: %bb.13(0x40000000), %bb.14(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = nsw ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    $r8d = MOV32rr $edx
    CMP32rr renamable $eax, renamable $esi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
    JCC_1 %bb.14, 12, implicit $eflags
  
  bb.13.for.body:
    successors: %bb.14(0x80000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    renamable $r8d = XOR32rr undef $r8d, undef $r8d, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
  
  bb.14.for.body:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $r8d
  
    renamable $r8d = nsw ADD32rr killed renamable $r8d, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr $edx
    CMP32rr renamable $r8d, renamable $esi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
    JCC_1 %bb.16, 12, implicit $eflags
  
  bb.15.for.body:
    successors: %bb.16(0x80000000)
    liveins: $ecx, $edi, $edx, $esi, $r8d
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JMP_1 %bb.16

...
---
name:            _Z10empty_funcv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK: MOV64mr %0, &ic
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
    RET64

...
---
name:            _Z10myFunctioniii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           '<4 x i32> <i32 0, i32 1, i32 2, i32 3>'
    alignment:       16
    isTargetSpecific: false
  - id:              1
    value:           '<4 x i32> <i32 1, i32 1, i32 1, i32 1>'
    alignment:       16
    isTargetSpecific: false
  - id:              2
    value:           '<4 x i32> <i32 8, i32 8, i32 8, i32 8>'
    alignment:       16
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.3(0x50000000), %bb.1(0x30000000)
    liveins: $edi, $edx, $esi
  
    TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JCC_1 %bb.1, 14, implicit $eflags
  
  bb.3.for.body.lr.ph:
    successors: %bb.7(0x40000000), %bb.4(0x40000000)
    liveins: $edi, $edx, $esi
  
    renamable $edx = NEG32r killed renamable $edx, implicit-def dead $eflags
    renamable $ecx = XOR32rr undef $ecx, undef $ecx, implicit-def dead $eflags
    renamable $eax = MOV32ri 0
    CMP32ri renamable $edi, 8, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 5, implicit-def $eflags
    JCC_1 %bb.7, 2, implicit $eflags
  
  bb.4.vector.ph:
    successors: %bb.5(0x80000000)
    liveins: $edi, $edx, $esi
  
    $ecx = MOV32rr $edi
    renamable $ecx = AND32ri killed renamable $ecx, -8, implicit-def dead $eflags
    renamable $xmm0 = MOVDI2PDIrr renamable $esi
    renamable $xmm0 = PSHUFDri killed renamable $xmm0, 0
    renamable $xmm1 = MOVDI2PDIrr renamable $edx
    renamable $xmm1 = PSHUFDri killed renamable $xmm1, 0
    renamable $xmm2 = PXORrr undef $xmm2, undef $xmm2
    renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    renamable $xmm5 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
    renamable $xmm6 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
    $eax = MOV32rr $ecx
    renamable $xmm7 = PXORrr undef $xmm7, undef $xmm7
    renamable $xmm4 = PXORrr undef $xmm4, undef $xmm4
    ; CHECK: %0:gr32 = ADD64ri32 %0, 13, implicit-def $eflags
  
  bb.5.vector.body (align 16):
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    liveins: $eax, $ecx, $edi, $edx, $esi, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $xmm5, $xmm6, $xmm7
  
    $xmm8 = MOVDQArr $xmm3
    renamable $xmm8 = PANDrr killed renamable $xmm8, renamable $xmm5
    renamable $xmm8 = PCMPEQDrr killed renamable $xmm8, renamable $xmm2
    $xmm9 = MOVDQArr $xmm0
    renamable $xmm9 = PANDrr killed renamable $xmm9, renamable $xmm8
    renamable $xmm8 = PANDNrr killed renamable $xmm8, renamable $xmm1
    renamable $xmm8 = PORrr killed renamable $xmm8, killed renamable $xmm9
    renamable $xmm7 = PADDDrr killed renamable $xmm7, renamable $xmm8
    renamable $xmm4 = PADDDrr killed renamable $xmm4, killed renamable $xmm8
    renamable $xmm3 = PADDDrr killed renamable $xmm3, renamable $xmm6
    renamable $eax = ADD32ri killed renamable $eax, -8, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 11, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
  
  bb.6.middle.block:
    successors: %bb.2(0x40000000), %bb.7(0x40000000)
    liveins: $ecx, $edi, $edx, $esi, $xmm4, $xmm7
  
    renamable $xmm4 = PADDDrr killed renamable $xmm4, killed renamable $xmm7
    renamable $xmm0 = PSHUFDri renamable $xmm4, -18
    renamable $xmm0 = PADDDrr killed renamable $xmm0, killed renamable $xmm4
    renamable $xmm1 = PSHUFDri renamable $xmm0, 85
    renamable $xmm1 = PADDDrr killed renamable $xmm1, killed renamable $xmm0
    renamable $eax = MOVPDI2DIrr killed renamable $xmm1
    CMP32rr renamable $ecx, renamable $edi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 8, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.7.for.body (align 16):
    successors: %bb.2(0x04000000), %bb.7(0x7c000000)
    liveins: $eax, $ecx, $edi, $edx, $esi
  
    TEST8ri renamable $cl, 1, implicit-def $eflags
    $r8d = MOV32rr $edx
    renamable $r8d = CMOV32rr killed renamable $r8d, renamable $esi, 4, implicit $eflags
    renamable $eax = ADD32rr killed renamable $eax, killed renamable $r8d, implicit-def dead $eflags
    renamable $ecx = nuw nsw INC32r killed renamable $ecx, implicit-def dead $eflags
    CMP32rr renamable $edi, renamable $ecx, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 7, implicit-def $eflags
    JCC_1 %bb.7, 5, implicit $eflags
  
  bb.2.for.cond.cleanup:
    liveins: $eax
  
    ; CHECK: MOV64mr %0, &ic
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
    RET64 $eax
  
  bb.1:
    ; CHECK: MOV64mr %0, &ic
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    RET64 $eax

...
---
name:            _Z20myFunctionAnotherVariii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x50000000), %bb.1(0x30000000)
    liveins: $edi, $edx, $esi
  
    renamable $esi = KILL $esi, implicit-def $rsi
    renamable $edi = KILL $edi, implicit-def $rdi
    TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
    JCC_1 %bb.1, 14, implicit $eflags
  
  bb.2.for.cond1.preheader.lr.ph:
    successors: %bb.9(0x40000000), %bb.3(0x40000000)
    liveins: $edx, $rdi, $rsi
  
    renamable $eax = LEA64_32r renamable $rsi, 1, renamable $rdi, 0, $noreg
    $r8d = MOV32rr $eax
    renamable $r8d = SUB32rr killed renamable $r8d, renamable $edx, implicit-def dead $eflags
    renamable $ecx = LEA64_32r renamable $rsi, 1, $noreg, -1, $noreg
    renamable $ecx = IMUL32rr killed renamable $ecx, killed renamable $r8d, implicit-def dead $eflags
    renamable $ecx = ADD32rr killed renamable $ecx, killed renamable $eax, implicit-def dead $eflags
    renamable $ecx = SUB32rr killed renamable $ecx, killed renamable $edx, implicit-def dead $eflags
    renamable $edx = XOR32rr undef $edx, undef $edx, implicit-def dead $eflags
    renamable $r8d = MOV32ri 0
    renamable $eax = MOV32ri 0
    CMP32ri renamable $edi, 8, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 12, implicit-def $eflags
    JCC_1 %bb.9, 2, implicit $eflags
  
  bb.3.vector.ph:
    successors: %bb.5(0x40000000), %bb.4(0x40000000)
    liveins: $ecx, $edx, $rdi, $rsi
  
    renamable $xmm0 = PXORrr undef $xmm0, undef $xmm0
    TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 3, implicit-def $eflags
    JCC_1 %bb.4, 15, implicit $eflags
  
  bb.5.vector.ph:
    successors: %bb.6(0x80000000)
    liveins: $ecx, $edx, $rdi, $rsi, $xmm0
  
    renamable $xmm1 = PXORrr undef $xmm1, undef $xmm1
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JMP_1 %bb.6
  
  bb.1:
    ; CHECK: MOV64mr %0, &ic
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    RET64 $eax
  
  bb.4:
    successors: %bb.6(0x80000000)
    liveins: $ecx, $edx, $rdi, $rsi, $xmm0
  
    renamable $xmm1 = MOVDI2PDIrr renamable $ecx
    renamable $xmm1 = PSHUFDri killed renamable $xmm1, 0
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
  
  bb.6.vector.ph:
    successors: %bb.7(0x80000000)
    liveins: $ecx, $edx, $rdi, $rsi, $xmm0, $xmm1
  
    $r8d = MOV32rr $edi
    renamable $r8d = AND32ri killed renamable $r8d, -8, implicit-def dead $eflags
    $eax = MOV32rr $r8d
    renamable $xmm2 = PXORrr undef $xmm2, undef $xmm2
    ; CHECK: %0:gr32 = ADD64ri32 %0, 4, implicit-def $eflags
  
  bb.7.vector.body (align 16):
    successors: %bb.8(0x04000000), %bb.7(0x7c000000)
    liveins: $eax, $ecx, $edx, $rdi, $rsi, $xmm0, $xmm1, $xmm2, $r8d
  
    renamable $xmm0 = PADDDrr killed renamable $xmm0, renamable $xmm1
    renamable $xmm2 = PADDDrr killed renamable $xmm2, renamable $xmm1
    renamable $eax = ADD32ri killed renamable $eax, -8, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 3, implicit-def $eflags
    JCC_1 %bb.7, 5, implicit $eflags
  
  bb.8.middle.block:
    successors: %bb.11(0x40000000), %bb.9(0x40000000)
    liveins: $ecx, $edx, $rdi, $rsi, $xmm0, $xmm2, $r8d
  
    renamable $xmm2 = PADDDrr killed renamable $xmm2, killed renamable $xmm0
    renamable $xmm0 = PSHUFDri renamable $xmm2, -18
    renamable $xmm0 = PADDDrr killed renamable $xmm0, killed renamable $xmm2
    renamable $xmm1 = PSHUFDri renamable $xmm0, 85
    renamable $xmm1 = PADDDrr killed renamable $xmm1, killed renamable $xmm0
    renamable $eax = MOVPDI2DIrr killed renamable $xmm1
    CMP32rr renamable $r8d, renamable $edi, implicit-def $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 8, implicit-def $eflags
    JCC_1 %bb.11, 4, implicit $eflags
  
  bb.9.for.cond1.preheader.preheader:
    successors: %bb.10(0x80000000)
    liveins: $eax, $ecx, $edx, $rdi, $rsi, $r8d
  
    $r9d = MOV32rr killed $eax
    TEST32rr renamable $esi, renamable $esi, implicit-def $eflags, implicit killed $rsi
    renamable $edx = CMOV32rr killed renamable $edx, killed renamable $ecx, 15, implicit $eflags
    renamable $edi = SUB32rr renamable $edi, killed renamable $r8d, implicit-def dead $eflags, implicit killed $rdi, implicit-def $rdi
    renamable $edx = IMUL32rr killed renamable $edx, renamable $edi, implicit-def dead $eflags
    $eax = MOV32rr killed $edx
    renamable $eax = ADD32rr killed renamable $eax, killed renamable $r9d, implicit-def dead $eflags
    ; CHECK: %0:gr32 = ADD64ri32 %0, 7, implicit-def $eflags
  
  bb.10.for.cond1.preheader (align 16):
    successors: %bb.11(0x04000000), %bb.10(0x7c000000)
    liveins: $eax, $rdi
  
    renamable $edi = DEC32r renamable $edi, implicit-def $eflags, implicit killed $rdi, implicit-def $rdi
    ; CHECK: %0:gr32 = ADD64ri32 %0, 2, implicit-def $eflags
    JCC_1 %bb.10, 5, implicit $eflags
  
  bb.11.for.cond.cleanup:
    liveins: $eax

    ; CHECK: MOV64mr %0, &ic
    ; CHECK: %0:gr32 = ADD64ri32 %0, 1, implicit-def $eflags
    RET64 $eax

...
