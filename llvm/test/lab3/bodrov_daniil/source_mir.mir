# RUN: llc -march=x86-64 -simplify-mir -run-pass=x86-count-machine-instr %s -o - | FileCheck %s

--- |
  ; ModuleID = 'test.ll'
  source_filename = "test.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  %"class.std::ios_base::Init" = type { i8 }
  
  @_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
  @__dso_handle = external hidden global i8
  @ic = dso_local global i64 0, align 8
  @llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 65535, ptr @_GLOBAL__sub_I_test.cpp, ptr null }]
  
  ; Function Attrs: noinline uwtable
  define internal void @__cxx_global_var_init() #0 section ".text.startup" {
  entry:
    call void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1) @_ZStL8__ioinit)
    %0 = call i32 @__cxa_atexit(ptr @_ZNSt8ios_base4InitD1Ev, ptr @_ZStL8__ioinit, ptr @__dso_handle) #3
    ret void
  }
  
  declare void @_ZNSt8ios_base4InitC1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #1
  
  ; Function Attrs: nounwind
  declare void @_ZNSt8ios_base4InitD1Ev(ptr noundef nonnull align 1 dereferenceable(1)) unnamed_addr #2
  
  ; Function Attrs: nounwind
  declare i32 @__cxa_atexit(ptr, ptr, ptr) #3
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z4funciii(i32 noundef %a, i32 noundef %b, i32 noundef %c) #4 {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    %c.addr = alloca i32, align 4
    %d = alloca i32, align 4
    %i = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    store i32 %c, ptr %c.addr, align 4
    store i64 0, ptr @ic, align 8
    store i32 0, ptr %d, align 4
    store i32 0, ptr %i, align 4
    br label %for.cond
  
  for.cond:                                         ; preds = %for.inc, %entry
    %0 = load i32, ptr %i, align 4
    %1 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %for.body, label %for.end
  
  for.body:                                         ; preds = %for.cond
    %2 = load i32, ptr %d, align 4
    %3 = load i32, ptr %b.addr, align 4
    %cmp1 = icmp slt i32 %2, %3
    br i1 %cmp1, label %if.then, label %if.end
  
  if.then:                                          ; preds = %for.body
    %4 = load i32, ptr %c.addr, align 4
    %5 = load i32, ptr %d, align 4
    %add = add nsw i32 %5, %4
    store i32 %add, ptr %d, align 4
    br label %if.end
  
  if.end:                                           ; preds = %if.then, %for.body
    br label %for.inc
  
  for.inc:                                          ; preds = %if.end
    %6 = load i32, ptr %i, align 4
    %inc = add nsw i32 %6, 1
    store i32 %inc, ptr %i, align 4
    br label %for.cond, !llvm.loop !6
  
  for.end:                                          ; preds = %for.cond
    %7 = load i32, ptr %d, align 4
    ret i32 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local void @_Z5func1v() #4 {
  entry:
    %a = alloca i32, align 4
    %b = alloca i32, align 4
    %c = alloca i32, align 4
    %res = alloca i32, align 4
    store i32 2, ptr %a, align 4
    store i32 3, ptr %b, align 4
    %0 = load i32, ptr %a, align 4
    %1 = load i32, ptr %b, align 4
    %add = add nsw i32 %0, %1
    %add1 = add nsw i32 %add, 2
    store i32 %add1, ptr %c, align 4
    %2 = load i32, ptr %c, align 4
    %mul = mul nsw i32 %2, 10
    store i32 %mul, ptr %res, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef i32 @_Z5func2v() #4 {
  entry:
    %c = alloca i32, align 4
    %a = alloca i32, align 4
    store i32 2, ptr %c, align 4
    %0 = load i32, ptr %c, align 4
    %add = add nsw i32 %0, 2
    store i32 %add, ptr %a, align 4
    %1 = load i32, ptr %a, align 4
    %mul = mul nsw i32 %1, 2
    %2 = load i32, ptr %c, align 4
    %div = sdiv i32 %2, 2
    %add1 = add nsw i32 %mul, %div
    ret i32 %add1
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define dso_local noundef double @_Z5func3dd(double noundef %a, double noundef %b) #4 {
  entry:
    %a.addr = alloca double, align 8
    %b.addr = alloca double, align 8
    %res = alloca double, align 8
    store double %a, ptr %a.addr, align 8
    store double %b, ptr %b.addr, align 8
    %0 = load double, ptr %a.addr, align 8
    %mul = fmul double %0, 3.500000e+00
    store double %mul, ptr %res, align 8
    %1 = load double, ptr %res, align 8
    %2 = load double, ptr %b.addr, align 8
    %mul1 = fmul double %1, %2
    %div = fdiv double %mul1, 5.450000e+00
    %3 = load double, ptr %res, align 8
    %div2 = fdiv double %3, %div
    store double %div2, ptr %res, align 8
    %4 = load double, ptr %res, align 8
    %add = fadd double %4, 1.000000e+01
    ret double %add
  }
  
  ; Function Attrs: mustprogress noinline norecurse nounwind optnone uwtable
  define dso_local noundef i32 @main() #5 {
  entry:
    %retval = alloca i32, align 4
    store i32 0, ptr %retval, align 4
    ret i32 0
  }
  
  ; Function Attrs: noinline uwtable
  define internal void @_GLOBAL__sub_I_test.cpp() #0 section ".text.startup" {
  entry:
    call void @__cxx_global_var_init()
    ret void
  }
  
  attributes #0 = { noinline uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { nounwind }
  attributes #4 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #5 = { mustprogress noinline norecurse nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 2}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"clang version 17.0.6 (https://github.com/overinvest/llvm-nnsu-2024.git b3bf01225c3779b871b46c5daa5802944b825221)"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            __cxx_global_var_init
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    $edi = MOV32ri @_ZStL8__ioinit, implicit-def $rdi
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt8ios_base4InitC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    renamable $rdi = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZNSt8ios_base4InitD1Ev, $noreg :: (load (s64) from got)
    $esi = MOV32ri @_ZStL8__ioinit, implicit-def $rsi
    $edx = MOV32ri @__dso_handle, implicit-def $rdx
    CALL64pcrel32 target-flags(x86-plt) @__cxa_atexit, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64

...
---
name:            _Z4funciii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$edi', virtual-reg: '' }
  - { reg: '$esi', virtual-reg: '' }
  - { reg: '$edx', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: a.addr, type: default, offset: -36, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: -32, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: c.addr, type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: d, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: i, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $edi, $edx, $esi
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store (s32) into %ir.a.addr)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $esi :: (store (s32) into %ir.b.addr)
    MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $edx :: (store (s32) into %ir.c.addr)
    MOV64mi32 $noreg, 1, $noreg, @ic, $noreg, 0 :: (store (s64) into @ic)
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.d)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 0 :: (store (s32) into %ir.i)
  
  bb.1.for.cond:
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load (s32) from %ir.a.addr)
    JCC_1 %bb.6, 13, implicit killed $eflags
  
  bb.2.for.body:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.b.addr)
    JCC_1 %bb.4, 13, implicit killed $eflags
  
  bb.3.if.then:
    successors: %bb.4(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.c.addr)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.d)
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.d)
  
  bb.4.if.end:
    successors: %bb.5(0x80000000)
  
    JMP_1 %bb.5
  
  bb.5.for.inc:
    successors: %bb.1(0x80000000)
  
    renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.i)
    renamable $eax = ADD32ri killed renamable $eax, 1, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.i)
    JMP_1 %bb.1
  
  bb.6.for.end:
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.d)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax

...
---
name:            _Z5func1v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: a, type: default, offset: -28, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: c, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: res, type: default, offset: -32, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -12, $noreg, 2 :: (store (s32) into %ir.a)
    MOV32mi $rbp, 1, $noreg, -8, $noreg, 3 :: (store (s32) into %ir.b)
    renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.a)
    renamable $eax = ADD32rm killed renamable $eax, $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.b)
    renamable $eax = ADD32ri killed renamable $eax, 2, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.c)
    renamable $eax = IMUL32rmi $rbp, 1, $noreg, -4, $noreg, 10, implicit-def dead $eflags :: (load (s32) from %ir.c)
    MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store (s32) into %ir.res)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64

...
---
name:            _Z5func2v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: c, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: a, type: default, offset: -24, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 2 :: (store (s32) into %ir.c)
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.c)
    renamable $eax = ADD32ri killed renamable $eax, 2, implicit-def dead $eflags
    MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.a)
    renamable $ecx = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.a)
    renamable $ecx = SHL32ri killed renamable $ecx, 1, implicit-def dead $eflags
    renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.c)
    renamable $esi = MOV32ri 2
    CDQ implicit-def $eax, implicit-def $edx, implicit $eax
    IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit $eax, implicit $edx
    renamable $ecx = ADD32rr killed renamable $ecx, killed renamable $eax, implicit-def dead $eflags
    $eax = MOV32rr killed $ecx
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $eax

...
---
name:            _Z5func3dd
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$xmm0', virtual-reg: '' }
  - { reg: '$xmm1', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: a.addr, type: default, offset: -40, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: -32, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: res, type: default, offset: -24, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'double 1.000000e+01'
    alignment:       8
    isTargetSpecific: false
  - id:              1
    value:           'double 5.450000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 3.500000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $xmm0, $xmm1
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOVSDmr $rbp, 1, $noreg, -24, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.a.addr)
    MOVSDmr $rbp, 1, $noreg, -16, $noreg, killed renamable $xmm1 :: (store (s64) into %ir.b.addr)
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    renamable $xmm0 = MULSDrm killed renamable $xmm0, $rbp, 1, $noreg, -24, $noreg, implicit $mxcsr :: (load (s64) from %ir.a.addr)
    MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.res)
    renamable $xmm0 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.res)
    renamable $xmm0 = MULSDrm killed renamable $xmm0, $rbp, 1, $noreg, -16, $noreg, implicit $mxcsr :: (load (s64) from %ir.b.addr)
    renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
    renamable $xmm0 = DIVSDrr killed renamable $xmm0, killed renamable $xmm1, implicit $mxcsr
    renamable $xmm1 = MOVSDrm_alt $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %ir.res)
    renamable $xmm1 = DIVSDrr killed renamable $xmm1, killed renamable $xmm0, implicit $mxcsr
    MOVSDmr $rbp, 1, $noreg, -8, $noreg, killed renamable $xmm1 :: (store (s64) into %ir.res)
    renamable $xmm0 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg
    renamable $xmm0 = ADDSDrm killed renamable $xmm0, $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s64) from %ir.res)
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit $xmm0

...
---
name:            main
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: retval, type: default, offset: -20, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.retval)
    $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64 implicit killed $eax

...
---
name:            _GLOBAL__sub_I_test.cpp
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: spill-slot, offset: -16, size: 8, alignment: 16, stack-id: default, 
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '', 
      debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    frame-setup CFI_INSTRUCTION offset $rbp, -16
    $rbp = frame-setup MOV64rr $rsp
    frame-setup CFI_INSTRUCTION def_cfa_register $rbp
    CALL64pcrel32 @__cxx_global_var_init, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp
    $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
    frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
    RET64

...
